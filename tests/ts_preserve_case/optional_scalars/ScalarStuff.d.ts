import * as flatbuffers from 'flatbuffers';
import { OptionalByte } from '../optional_scalars/OptionalByte.js';
export declare class ScalarStuff {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): ScalarStuff;
    static getRootAsScalarStuff(bb: flatbuffers.ByteBuffer, obj?: ScalarStuff): ScalarStuff;
    static getSizePrefixedRootAsScalarStuff(bb: flatbuffers.ByteBuffer, obj?: ScalarStuff): ScalarStuff;
    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean;
    just_i8(): number;
    maybe_i8(): number | null;
    default_i8(): number;
    just_u8(): number;
    maybe_u8(): number | null;
    default_u8(): number;
    just_i16(): number;
    maybe_i16(): number | null;
    default_i16(): number;
    just_u16(): number;
    maybe_u16(): number | null;
    default_u16(): number;
    just_i32(): number;
    maybe_i32(): number | null;
    default_i32(): number;
    just_u32(): number;
    maybe_u32(): number | null;
    default_u32(): number;
    just_i64(): bigint;
    maybe_i64(): bigint | null;
    default_i64(): bigint;
    just_u64(): bigint;
    maybe_u64(): bigint | null;
    default_u64(): bigint;
    just_f32(): number;
    maybe_f32(): number | null;
    default_f32(): number;
    just_f64(): number;
    maybe_f64(): number | null;
    default_f64(): number;
    just_bool(): boolean;
    maybe_bool(): boolean | null;
    default_bool(): boolean;
    just_enum(): OptionalByte;
    maybe_enum(): OptionalByte | null;
    default_enum(): OptionalByte;
    static getFullyQualifiedName(): string;
    static startScalarStuff(builder: flatbuffers.Builder): void;
    static add_just_i8(builder: flatbuffers.Builder, just_i8: number): void;
    static add_maybe_i8(builder: flatbuffers.Builder, maybe_i8: number): void;
    static add_default_i8(builder: flatbuffers.Builder, default_i8: number): void;
    static add_just_u8(builder: flatbuffers.Builder, just_u8: number): void;
    static add_maybe_u8(builder: flatbuffers.Builder, maybe_u8: number): void;
    static add_default_u8(builder: flatbuffers.Builder, default_u8: number): void;
    static add_just_i16(builder: flatbuffers.Builder, just_i16: number): void;
    static add_maybe_i16(builder: flatbuffers.Builder, maybe_i16: number): void;
    static add_default_i16(builder: flatbuffers.Builder, default_i16: number): void;
    static add_just_u16(builder: flatbuffers.Builder, just_u16: number): void;
    static add_maybe_u16(builder: flatbuffers.Builder, maybe_u16: number): void;
    static add_default_u16(builder: flatbuffers.Builder, default_u16: number): void;
    static add_just_i32(builder: flatbuffers.Builder, just_i32: number): void;
    static add_maybe_i32(builder: flatbuffers.Builder, maybe_i32: number): void;
    static add_default_i32(builder: flatbuffers.Builder, default_i32: number): void;
    static add_just_u32(builder: flatbuffers.Builder, just_u32: number): void;
    static add_maybe_u32(builder: flatbuffers.Builder, maybe_u32: number): void;
    static add_default_u32(builder: flatbuffers.Builder, default_u32: number): void;
    static add_just_i64(builder: flatbuffers.Builder, just_i64: bigint): void;
    static add_maybe_i64(builder: flatbuffers.Builder, maybe_i64: bigint): void;
    static add_default_i64(builder: flatbuffers.Builder, default_i64: bigint): void;
    static add_just_u64(builder: flatbuffers.Builder, just_u64: bigint): void;
    static add_maybe_u64(builder: flatbuffers.Builder, maybe_u64: bigint): void;
    static add_default_u64(builder: flatbuffers.Builder, default_u64: bigint): void;
    static add_just_f32(builder: flatbuffers.Builder, just_f32: number): void;
    static add_maybe_f32(builder: flatbuffers.Builder, maybe_f32: number): void;
    static add_default_f32(builder: flatbuffers.Builder, default_f32: number): void;
    static add_just_f64(builder: flatbuffers.Builder, just_f64: number): void;
    static add_maybe_f64(builder: flatbuffers.Builder, maybe_f64: number): void;
    static add_default_f64(builder: flatbuffers.Builder, default_f64: number): void;
    static add_just_bool(builder: flatbuffers.Builder, just_bool: boolean): void;
    static add_maybe_bool(builder: flatbuffers.Builder, maybe_bool: boolean): void;
    static add_default_bool(builder: flatbuffers.Builder, default_bool: boolean): void;
    static add_just_enum(builder: flatbuffers.Builder, just_enum: OptionalByte): void;
    static add_maybe_enum(builder: flatbuffers.Builder, maybe_enum: OptionalByte): void;
    static add_default_enum(builder: flatbuffers.Builder, default_enum: OptionalByte): void;
    static endScalarStuff(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishScalarStuffBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedScalarStuffBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createScalarStuff(builder: flatbuffers.Builder, just_i8: number, maybe_i8: number | null, default_i8: number, just_u8: number, maybe_u8: number | null, default_u8: number, just_i16: number, maybe_i16: number | null, default_i16: number, just_u16: number, maybe_u16: number | null, default_u16: number, just_i32: number, maybe_i32: number | null, default_i32: number, just_u32: number, maybe_u32: number | null, default_u32: number, just_i64: bigint, maybe_i64: bigint | null, default_i64: bigint, just_u64: bigint, maybe_u64: bigint | null, default_u64: bigint, just_f32: number, maybe_f32: number | null, default_f32: number, just_f64: number, maybe_f64: number | null, default_f64: number, just_bool: boolean, maybe_bool: boolean | null, default_bool: boolean, just_enum: OptionalByte, maybe_enum: OptionalByte | null, default_enum: OptionalByte): flatbuffers.Offset;
}
