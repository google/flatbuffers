// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { OptionalByte } from '../optional_scalars/OptionalByte.js';


export class ScalarStuff {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ScalarStuff {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsScalarStuff(bb:flatbuffers.ByteBuffer, obj?:ScalarStuff):ScalarStuff {
  return (obj || new ScalarStuff()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsScalarStuff(bb:flatbuffers.ByteBuffer, obj?:ScalarStuff):ScalarStuff {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ScalarStuff()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('NULL');
}

just_i8():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

maybe_i8():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

default_i8():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 42;
}

just_u8():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

maybe_u8():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

default_u8():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 42;
}

just_i16():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
}

maybe_i16():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : null;
}

default_i16():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 42;
}

just_u16():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

maybe_u16():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : null;
}

default_u16():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 42;
}

just_i32():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

maybe_i32():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : null;
}

default_i32():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 42;
}

just_u32():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

maybe_u32():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : null;
}

default_u32():number {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 42;
}

just_i64():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

maybe_i64():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : null;
}

default_i64():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('42');
}

just_u64():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

maybe_u64():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

default_u64():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('42');
}

just_f32():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

maybe_f32():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : null;
}

default_f32():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 42.0;
}

just_f64():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

maybe_f64():number|null {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : null;
}

default_f64():number {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 42.0;
}

just_bool():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

maybe_bool():boolean|null {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : null;
}

default_bool():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : true;
}

just_enum():OptionalByte {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OptionalByte.None;
}

maybe_enum():OptionalByte|null {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : null;
}

default_enum():OptionalByte {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : OptionalByte.One;
}

static getFullyQualifiedName():string {
  return 'optional_scalars.ScalarStuff';
}

static startScalarStuff(builder:flatbuffers.Builder) {
  builder.startObject(36);
}

static add_just_i8(builder:flatbuffers.Builder, just_i8:number) {
  builder.addFieldInt8(0, just_i8, 0);
}

static add_maybe_i8(builder:flatbuffers.Builder, maybe_i8:number) {
  builder.addFieldInt8(1, maybe_i8, null);
}

static add_default_i8(builder:flatbuffers.Builder, default_i8:number) {
  builder.addFieldInt8(2, default_i8, 42);
}

static add_just_u8(builder:flatbuffers.Builder, just_u8:number) {
  builder.addFieldInt8(3, just_u8, 0);
}

static add_maybe_u8(builder:flatbuffers.Builder, maybe_u8:number) {
  builder.addFieldInt8(4, maybe_u8, null);
}

static add_default_u8(builder:flatbuffers.Builder, default_u8:number) {
  builder.addFieldInt8(5, default_u8, 42);
}

static add_just_i16(builder:flatbuffers.Builder, just_i16:number) {
  builder.addFieldInt16(6, just_i16, 0);
}

static add_maybe_i16(builder:flatbuffers.Builder, maybe_i16:number) {
  builder.addFieldInt16(7, maybe_i16, null);
}

static add_default_i16(builder:flatbuffers.Builder, default_i16:number) {
  builder.addFieldInt16(8, default_i16, 42);
}

static add_just_u16(builder:flatbuffers.Builder, just_u16:number) {
  builder.addFieldInt16(9, just_u16, 0);
}

static add_maybe_u16(builder:flatbuffers.Builder, maybe_u16:number) {
  builder.addFieldInt16(10, maybe_u16, null);
}

static add_default_u16(builder:flatbuffers.Builder, default_u16:number) {
  builder.addFieldInt16(11, default_u16, 42);
}

static add_just_i32(builder:flatbuffers.Builder, just_i32:number) {
  builder.addFieldInt32(12, just_i32, 0);
}

static add_maybe_i32(builder:flatbuffers.Builder, maybe_i32:number) {
  builder.addFieldInt32(13, maybe_i32, null);
}

static add_default_i32(builder:flatbuffers.Builder, default_i32:number) {
  builder.addFieldInt32(14, default_i32, 42);
}

static add_just_u32(builder:flatbuffers.Builder, just_u32:number) {
  builder.addFieldInt32(15, just_u32, 0);
}

static add_maybe_u32(builder:flatbuffers.Builder, maybe_u32:number) {
  builder.addFieldInt32(16, maybe_u32, null);
}

static add_default_u32(builder:flatbuffers.Builder, default_u32:number) {
  builder.addFieldInt32(17, default_u32, 42);
}

static add_just_i64(builder:flatbuffers.Builder, just_i64:bigint) {
  builder.addFieldInt64(18, just_i64, BigInt('0'));
}

static add_maybe_i64(builder:flatbuffers.Builder, maybe_i64:bigint) {
  builder.addFieldInt64(19, maybe_i64, null);
}

static add_default_i64(builder:flatbuffers.Builder, default_i64:bigint) {
  builder.addFieldInt64(20, default_i64, BigInt('42'));
}

static add_just_u64(builder:flatbuffers.Builder, just_u64:bigint) {
  builder.addFieldInt64(21, just_u64, BigInt('0'));
}

static add_maybe_u64(builder:flatbuffers.Builder, maybe_u64:bigint) {
  builder.addFieldInt64(22, maybe_u64, null);
}

static add_default_u64(builder:flatbuffers.Builder, default_u64:bigint) {
  builder.addFieldInt64(23, default_u64, BigInt('42'));
}

static add_just_f32(builder:flatbuffers.Builder, just_f32:number) {
  builder.addFieldFloat32(24, just_f32, 0.0);
}

static add_maybe_f32(builder:flatbuffers.Builder, maybe_f32:number) {
  builder.addFieldFloat32(25, maybe_f32, null);
}

static add_default_f32(builder:flatbuffers.Builder, default_f32:number) {
  builder.addFieldFloat32(26, default_f32, 42.0);
}

static add_just_f64(builder:flatbuffers.Builder, just_f64:number) {
  builder.addFieldFloat64(27, just_f64, 0.0);
}

static add_maybe_f64(builder:flatbuffers.Builder, maybe_f64:number) {
  builder.addFieldFloat64(28, maybe_f64, null);
}

static add_default_f64(builder:flatbuffers.Builder, default_f64:number) {
  builder.addFieldFloat64(29, default_f64, 42.0);
}

static add_just_bool(builder:flatbuffers.Builder, just_bool:boolean) {
  builder.addFieldInt8(30, +just_bool, +false);
}

static add_maybe_bool(builder:flatbuffers.Builder, maybe_bool:boolean) {
  builder.addFieldInt8(31, +maybe_bool, null);
}

static add_default_bool(builder:flatbuffers.Builder, default_bool:boolean) {
  builder.addFieldInt8(32, +default_bool, +true);
}

static add_just_enum(builder:flatbuffers.Builder, just_enum:OptionalByte) {
  builder.addFieldInt8(33, just_enum, OptionalByte.None);
}

static add_maybe_enum(builder:flatbuffers.Builder, maybe_enum:OptionalByte) {
  builder.addFieldInt8(34, maybe_enum, null);
}

static add_default_enum(builder:flatbuffers.Builder, default_enum:OptionalByte) {
  builder.addFieldInt8(35, default_enum, OptionalByte.One);
}

static endScalarStuff(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishScalarStuffBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NULL');
}

static finishSizePrefixedScalarStuffBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'NULL', true);
}

static createScalarStuff(builder:flatbuffers.Builder, just_i8:number, maybe_i8:number|null, default_i8:number, just_u8:number, maybe_u8:number|null, default_u8:number, just_i16:number, maybe_i16:number|null, default_i16:number, just_u16:number, maybe_u16:number|null, default_u16:number, just_i32:number, maybe_i32:number|null, default_i32:number, just_u32:number, maybe_u32:number|null, default_u32:number, just_i64:bigint, maybe_i64:bigint|null, default_i64:bigint, just_u64:bigint, maybe_u64:bigint|null, default_u64:bigint, just_f32:number, maybe_f32:number|null, default_f32:number, just_f64:number, maybe_f64:number|null, default_f64:number, just_bool:boolean, maybe_bool:boolean|null, default_bool:boolean, just_enum:OptionalByte, maybe_enum:OptionalByte|null, default_enum:OptionalByte):flatbuffers.Offset {
  ScalarStuff.startScalarStuff(builder);
  ScalarStuff.add_just_i8(builder, just_i8);
  if (maybe_i8 !== null)
    ScalarStuff.add_maybe_i8(builder, maybe_i8);
  ScalarStuff.add_default_i8(builder, default_i8);
  ScalarStuff.add_just_u8(builder, just_u8);
  if (maybe_u8 !== null)
    ScalarStuff.add_maybe_u8(builder, maybe_u8);
  ScalarStuff.add_default_u8(builder, default_u8);
  ScalarStuff.add_just_i16(builder, just_i16);
  if (maybe_i16 !== null)
    ScalarStuff.add_maybe_i16(builder, maybe_i16);
  ScalarStuff.add_default_i16(builder, default_i16);
  ScalarStuff.add_just_u16(builder, just_u16);
  if (maybe_u16 !== null)
    ScalarStuff.add_maybe_u16(builder, maybe_u16);
  ScalarStuff.add_default_u16(builder, default_u16);
  ScalarStuff.add_just_i32(builder, just_i32);
  if (maybe_i32 !== null)
    ScalarStuff.add_maybe_i32(builder, maybe_i32);
  ScalarStuff.add_default_i32(builder, default_i32);
  ScalarStuff.add_just_u32(builder, just_u32);
  if (maybe_u32 !== null)
    ScalarStuff.add_maybe_u32(builder, maybe_u32);
  ScalarStuff.add_default_u32(builder, default_u32);
  ScalarStuff.add_just_i64(builder, just_i64);
  if (maybe_i64 !== null)
    ScalarStuff.add_maybe_i64(builder, maybe_i64);
  ScalarStuff.add_default_i64(builder, default_i64);
  ScalarStuff.add_just_u64(builder, just_u64);
  if (maybe_u64 !== null)
    ScalarStuff.add_maybe_u64(builder, maybe_u64);
  ScalarStuff.add_default_u64(builder, default_u64);
  ScalarStuff.add_just_f32(builder, just_f32);
  if (maybe_f32 !== null)
    ScalarStuff.add_maybe_f32(builder, maybe_f32);
  ScalarStuff.add_default_f32(builder, default_f32);
  ScalarStuff.add_just_f64(builder, just_f64);
  if (maybe_f64 !== null)
    ScalarStuff.add_maybe_f64(builder, maybe_f64);
  ScalarStuff.add_default_f64(builder, default_f64);
  ScalarStuff.add_just_bool(builder, just_bool);
  if (maybe_bool !== null)
    ScalarStuff.add_maybe_bool(builder, maybe_bool);
  ScalarStuff.add_default_bool(builder, default_bool);
  ScalarStuff.add_just_enum(builder, just_enum);
  if (maybe_enum !== null)
    ScalarStuff.add_maybe_enum(builder, maybe_enum);
  ScalarStuff.add_default_enum(builder, default_enum);
  return ScalarStuff.endScalarStuff(builder);
}
}
