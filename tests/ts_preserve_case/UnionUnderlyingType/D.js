// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { ABC, unionToABC, unionListToABC } from '../UnionUnderlyingType/ABC.js';
export class D {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsD(bb, obj) {
        return (obj || new D()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsD(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new D()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    test_union_type() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : ABC.NONE;
    }
    test_union(obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    test_vector_of_union_type(index) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : null;
    }
    test_vector_of_union_type_Length() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    test_vector_of_union_type_Array() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    test_vector_of_union(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__union(obj, this.bb.__vector(this.bb_pos + offset) + index * 4) : null;
    }
    test_vector_of_union_Length() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static getFullyQualifiedName() {
        return 'UnionUnderlyingType.D';
    }
    static startD(builder) {
        builder.startObject(4);
    }
    static add_test_union_type(builder, test_union_type) {
        builder.addFieldInt32(0, test_union_type, ABC.NONE);
    }
    static add_test_union(builder, test_unionOffset) {
        builder.addFieldOffset(1, test_unionOffset, 0);
    }
    static add_test_vector_of_union_type(builder, test_vector_of_union_typeOffset) {
        builder.addFieldOffset(2, test_vector_of_union_typeOffset, 0);
    }
    static create_test_vector_of_union_type_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    }
    static start_test_vector_of_union_type_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_test_vector_of_union(builder, test_vector_of_unionOffset) {
        builder.addFieldOffset(3, test_vector_of_unionOffset, 0);
    }
    static create_test_vector_of_union_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_test_vector_of_union_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endD(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createD(builder, test_union_type, test_unionOffset, test_vector_of_union_typeOffset, test_vector_of_unionOffset) {
        D.startD(builder);
        D.add_test_union_type(builder, test_union_type);
        D.add_test_union(builder, test_unionOffset);
        D.add_test_vector_of_union_type(builder, test_vector_of_union_typeOffset);
        D.add_test_vector_of_union(builder, test_vector_of_unionOffset);
        return D.endD(builder);
    }
    unpack() {
        return new DT(this.test_union_type(), (() => {
            const temp = unionToABC(this.test_union_type(), this.test_union.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.bb.createScalarList(this.test_vector_of_union_type.bind(this), this.test_vector_of_union_type_Length()), (() => {
            const ret = [];
            for (let targetEnumIndex = 0; targetEnumIndex < this.test_vector_of_union_type_Length(); ++targetEnumIndex) {
                const targetEnum = this.test_vector_of_union_type(targetEnumIndex);
                if (targetEnum === null || ABC[targetEnum] === 'NONE') {
                    continue;
                }
                const temp = unionListToABC(targetEnum, this.test_vector_of_union.bind(this), targetEnumIndex);
                if (temp === null) {
                    continue;
                }
                ret.push(temp.unpack());
            }
            return ret;
        })());
    }
    unpackTo(_o) {
        _o.test_union_type = this.test_union_type();
        _o.test_union = (() => {
            const temp = unionToABC(this.test_union_type(), this.test_union.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.test_vector_of_union_type = this.bb.createScalarList(this.test_vector_of_union_type.bind(this), this.test_vector_of_union_type_Length());
        _o.test_vector_of_union = (() => {
            const ret = [];
            for (let targetEnumIndex = 0; targetEnumIndex < this.test_vector_of_union_type_Length(); ++targetEnumIndex) {
                const targetEnum = this.test_vector_of_union_type(targetEnumIndex);
                if (targetEnum === null || ABC[targetEnum] === 'NONE') {
                    continue;
                }
                const temp = unionListToABC(targetEnum, this.test_vector_of_union.bind(this), targetEnumIndex);
                if (temp === null) {
                    continue;
                }
                ret.push(temp.unpack());
            }
            return ret;
        })();
    }
}
export class DT {
    constructor(test_union_type = ABC.NONE, test_union = null, test_vector_of_union_type = [], test_vector_of_union = []) {
        this.test_union_type = test_union_type;
        this.test_union = test_union;
        this.test_vector_of_union_type = test_vector_of_union_type;
        this.test_vector_of_union = test_vector_of_union;
    }
    pack(builder) {
        const test_union = builder.createObjectOffset(this.test_union);
        const test_vector_of_union_type = D.create_test_vector_of_union_type_Vector(builder, this.test_vector_of_union_type);
        const test_vector_of_union = D.create_test_vector_of_union_Vector(builder, builder.createObjectOffsetList(this.test_vector_of_union));
        return D.createD(builder, this.test_union_type, test_union, test_vector_of_union_type, test_vector_of_union);
    }
}
