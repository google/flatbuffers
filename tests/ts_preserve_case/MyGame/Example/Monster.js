// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Ability } from '../../MyGame/Example/Ability.js';
import { Any, unionToAny } from '../../MyGame/Example/Any.js';
import { AnyAmbiguousAliases, unionToAnyAmbiguousAliases } from '../../MyGame/Example/AnyAmbiguousAliases.js';
import { AnyUniqueAliases, unionToAnyUniqueAliases } from '../../MyGame/Example/AnyUniqueAliases.js';
import { Color } from '../../MyGame/Example/Color.js';
import { Race } from '../../MyGame/Example/Race.js';
import { Referrable } from '../../MyGame/Example/Referrable.js';
import { Stat } from '../../MyGame/Example/Stat.js';
import { Test } from '../../MyGame/Example/Test.js';
import { Vec3 } from '../../MyGame/Example/Vec3.js';
import { InParentNamespace } from '../../MyGame/InParentNamespace.js';
/**
 * an example documentation comment: "monster object"
 */
export class Monster {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsMonster(bb, obj) {
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsMonster(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Monster()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('MONS');
    }
    pos(obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Vec3()).__init(this.bb_pos + offset, this.bb) : null;
    }
    mana() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
    }
    mutate_mana(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt16(this.bb_pos + offset, value);
        return true;
    }
    hp() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : 100;
    }
    mutate_hp(value) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt16(this.bb_pos + offset, value);
        return true;
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    inventory(index) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    inventory_Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    inventory_Array() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    color() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : Color.Blue;
    }
    mutate_color(value) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint8(this.bb_pos + offset, value);
        return true;
    }
    test_type() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : Any.NONE;
    }
    test(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    test4(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? (obj || new Test()).__init(this.bb.__vector(this.bb_pos + offset) + index * 4, this.bb) : null;
    }
    test4_Length() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    testarrayofstring(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    testarrayofstring_Length() {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    /**
     * an example documentation comment: this will end up in the generated code
     * multiline too
     */
    testarrayoftables(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? (obj || new Monster()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    testarrayoftables_Length() {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    enemy(obj) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new Monster()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    testnestedflatbuffer(index) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    testnestedflatbuffer_Length() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    testnestedflatbuffer_Array() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    testempty(obj) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new Stat()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    testbool() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    mutate_testbool(value) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt8(this.bb_pos + offset, +value);
        return true;
    }
    testhashs32_fnv1() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_testhashs32_fnv1(value) {
        const offset = this.bb.__offset(this.bb_pos, 36);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    testhashu32_fnv1() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    mutate_testhashu32_fnv1(value) {
        const offset = this.bb.__offset(this.bb_pos, 38);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint32(this.bb_pos + offset, value);
        return true;
    }
    testhashs64_fnv1() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_testhashs64_fnv1(value) {
        const offset = this.bb.__offset(this.bb_pos, 40);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt64(this.bb_pos + offset, value);
        return true;
    }
    testhashu64_fnv1() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_testhashu64_fnv1(value) {
        const offset = this.bb.__offset(this.bb_pos, 42);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    testhashs32_fnv1a() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_testhashs32_fnv1a(value) {
        const offset = this.bb.__offset(this.bb_pos, 44);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    testhashu32_fnv1a() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    mutate_testhashu32_fnv1a(value) {
        const offset = this.bb.__offset(this.bb_pos, 46);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint32(this.bb_pos + offset, value);
        return true;
    }
    testhashs64_fnv1a() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_testhashs64_fnv1a(value) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt64(this.bb_pos + offset, value);
        return true;
    }
    testhashu64_fnv1a() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_testhashu64_fnv1a(value) {
        const offset = this.bb.__offset(this.bb_pos, 50);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    testarrayofbools(index) {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? !!this.bb.readInt8(this.bb.__vector(this.bb_pos + offset) + index) : false;
    }
    testarrayofbools_Length() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    testarrayofbools_Array() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? new Int8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    testf() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 3.14159;
    }
    mutate_testf(value) {
        const offset = this.bb.__offset(this.bb_pos, 54);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    testf2() {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 3.0;
    }
    mutate_testf2(value) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    testf3() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    mutate_testf3(value) {
        const offset = this.bb.__offset(this.bb_pos, 58);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    testarrayofstring2(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    testarrayofstring2_Length() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    testarrayofsortedstruct(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? (obj || new Ability()).__init(this.bb.__vector(this.bb_pos + offset) + index * 8, this.bb) : null;
    }
    testarrayofsortedstruct_Length() {
        const offset = this.bb.__offset(this.bb_pos, 62);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    flex(index) {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    flex_Length() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    flex_Array() {
        const offset = this.bb.__offset(this.bb_pos, 64);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    test5(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? (obj || new Test()).__init(this.bb.__vector(this.bb_pos + offset) + index * 4, this.bb) : null;
    }
    test5_Length() {
        const offset = this.bb.__offset(this.bb_pos, 66);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    vector_of_longs(index) {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    vector_of_longs_Length() {
        const offset = this.bb.__offset(this.bb_pos, 68);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    vector_of_doubles(index) {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;
    }
    vector_of_doubles_Length() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    vector_of_doubles_Array() {
        const offset = this.bb.__offset(this.bb_pos, 70);
        return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    parent_namespace_test(obj) {
        const offset = this.bb.__offset(this.bb_pos, 72);
        return offset ? (obj || new InParentNamespace()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    vector_of_referrables(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? (obj || new Referrable()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    vector_of_referrables_Length() {
        const offset = this.bb.__offset(this.bb_pos, 74);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    single_weak_reference() {
        const offset = this.bb.__offset(this.bb_pos, 76);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_single_weak_reference(value) {
        const offset = this.bb.__offset(this.bb_pos, 76);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    vector_of_weak_references(index) {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.readUint64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    vector_of_weak_references_Length() {
        const offset = this.bb.__offset(this.bb_pos, 78);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    vector_of_strong_referrables(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? (obj || new Referrable()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    vector_of_strong_referrables_Length() {
        const offset = this.bb.__offset(this.bb_pos, 80);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    co_owning_reference() {
        const offset = this.bb.__offset(this.bb_pos, 82);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_co_owning_reference(value) {
        const offset = this.bb.__offset(this.bb_pos, 82);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    vector_of_co_owning_references(index) {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.readUint64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    vector_of_co_owning_references_Length() {
        const offset = this.bb.__offset(this.bb_pos, 84);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    non_owning_reference() {
        const offset = this.bb.__offset(this.bb_pos, 86);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_non_owning_reference(value) {
        const offset = this.bb.__offset(this.bb_pos, 86);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    vector_of_non_owning_references(index) {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.readUint64(this.bb.__vector(this.bb_pos + offset) + index * 8) : BigInt(0);
    }
    vector_of_non_owning_references_Length() {
        const offset = this.bb.__offset(this.bb_pos, 88);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    any_unique_type() {
        const offset = this.bb.__offset(this.bb_pos, 90);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : AnyUniqueAliases.NONE;
    }
    any_unique(obj) {
        const offset = this.bb.__offset(this.bb_pos, 92);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    any_ambiguous_type() {
        const offset = this.bb.__offset(this.bb_pos, 94);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : AnyAmbiguousAliases.NONE;
    }
    any_ambiguous(obj) {
        const offset = this.bb.__offset(this.bb_pos, 96);
        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    }
    vector_of_enums(index) {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : null;
    }
    vector_of_enums_Length() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    vector_of_enums_Array() {
        const offset = this.bb.__offset(this.bb_pos, 98);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    signed_enum() {
        const offset = this.bb.__offset(this.bb_pos, 100);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : Race.None;
    }
    mutate_signed_enum(value) {
        const offset = this.bb.__offset(this.bb_pos, 100);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt8(this.bb_pos + offset, value);
        return true;
    }
    testrequirednestedflatbuffer(index) {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    }
    testrequirednestedflatbuffer_Length() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    testrequirednestedflatbuffer_Array() {
        const offset = this.bb.__offset(this.bb_pos, 102);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    scalar_key_sorted_tables(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? (obj || new Stat()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    scalar_key_sorted_tables_Length() {
        const offset = this.bb.__offset(this.bb_pos, 104);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    native_inline(obj) {
        const offset = this.bb.__offset(this.bb_pos, 106);
        return offset ? (obj || new Test()).__init(this.bb_pos + offset, this.bb) : null;
    }
    long_enum_non_enum_default() {
        const offset = this.bb.__offset(this.bb_pos, 108);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_long_enum_non_enum_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 108);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    long_enum_normal_default() {
        const offset = this.bb.__offset(this.bb_pos, 110);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('2');
    }
    mutate_long_enum_normal_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 110);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    nan_default() {
        const offset = this.bb.__offset(this.bb_pos, 112);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : NaN;
    }
    mutate_nan_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 112);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    inf_default() {
        const offset = this.bb.__offset(this.bb_pos, 114);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : Infinity;
    }
    mutate_inf_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 114);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    positive_inf_default() {
        const offset = this.bb.__offset(this.bb_pos, 116);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : Infinity;
    }
    mutate_positive_inf_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 116);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    infinity_default() {
        const offset = this.bb.__offset(this.bb_pos, 118);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : Infinity;
    }
    mutate_infinity_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 118);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    positive_infinity_default() {
        const offset = this.bb.__offset(this.bb_pos, 120);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : Infinity;
    }
    mutate_positive_infinity_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 120);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    negative_inf_default() {
        const offset = this.bb.__offset(this.bb_pos, 122);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : -Infinity;
    }
    mutate_negative_inf_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 122);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    negative_infinity_default() {
        const offset = this.bb.__offset(this.bb_pos, 124);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : -Infinity;
    }
    mutate_negative_infinity_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 124);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat32(this.bb_pos + offset, value);
        return true;
    }
    double_inf_default() {
        const offset = this.bb.__offset(this.bb_pos, 126);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : Infinity;
    }
    mutate_double_inf_default(value) {
        const offset = this.bb.__offset(this.bb_pos, 126);
        if (offset === 0) {
            return false;
        }
        this.bb.writeFloat64(this.bb_pos + offset, value);
        return true;
    }
    static getFullyQualifiedName() {
        return 'MyGame.Example.Monster';
    }
    static startMonster(builder) {
        builder.startObject(62);
    }
    static add_pos(builder, posOffset) {
        builder.addFieldStruct(0, posOffset, 0);
    }
    static add_mana(builder, mana) {
        builder.addFieldInt16(1, mana, 150);
    }
    static add_hp(builder, hp) {
        builder.addFieldInt16(2, hp, 100);
    }
    static add_name(builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    }
    static add_inventory(builder, inventoryOffset) {
        builder.addFieldOffset(5, inventoryOffset, 0);
    }
    static create_inventory_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static start_inventory_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_color(builder, color) {
        builder.addFieldInt8(6, color, Color.Blue);
    }
    static add_test_type(builder, test_type) {
        builder.addFieldInt8(7, test_type, Any.NONE);
    }
    static add_test(builder, testOffset) {
        builder.addFieldOffset(8, testOffset, 0);
    }
    static add_test4(builder, test4Offset) {
        builder.addFieldOffset(9, test4Offset, 0);
    }
    static start_test4_Vector(builder, numElems) {
        builder.startVector(4, numElems, 2);
    }
    static add_testarrayofstring(builder, testarrayofstringOffset) {
        builder.addFieldOffset(10, testarrayofstringOffset, 0);
    }
    static create_testarrayofstring_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_testarrayofstring_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_testarrayoftables(builder, testarrayoftablesOffset) {
        builder.addFieldOffset(11, testarrayoftablesOffset, 0);
    }
    static create_testarrayoftables_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_testarrayoftables_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_enemy(builder, enemyOffset) {
        builder.addFieldOffset(12, enemyOffset, 0);
    }
    static add_testnestedflatbuffer(builder, testnestedflatbufferOffset) {
        builder.addFieldOffset(13, testnestedflatbufferOffset, 0);
    }
    static create_testnestedflatbuffer_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static start_testnestedflatbuffer_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_testempty(builder, testemptyOffset) {
        builder.addFieldOffset(14, testemptyOffset, 0);
    }
    static add_testbool(builder, testbool) {
        builder.addFieldInt8(15, +testbool, +false);
    }
    static add_testhashs32_fnv1(builder, testhashs32_fnv1) {
        builder.addFieldInt32(16, testhashs32_fnv1, 0);
    }
    static add_testhashu32_fnv1(builder, testhashu32_fnv1) {
        builder.addFieldInt32(17, testhashu32_fnv1, 0);
    }
    static add_testhashs64_fnv1(builder, testhashs64_fnv1) {
        builder.addFieldInt64(18, testhashs64_fnv1, BigInt('0'));
    }
    static add_testhashu64_fnv1(builder, testhashu64_fnv1) {
        builder.addFieldInt64(19, testhashu64_fnv1, BigInt('0'));
    }
    static add_testhashs32_fnv1a(builder, testhashs32_fnv1a) {
        builder.addFieldInt32(20, testhashs32_fnv1a, 0);
    }
    static add_testhashu32_fnv1a(builder, testhashu32_fnv1a) {
        builder.addFieldInt32(21, testhashu32_fnv1a, 0);
    }
    static add_testhashs64_fnv1a(builder, testhashs64_fnv1a) {
        builder.addFieldInt64(22, testhashs64_fnv1a, BigInt('0'));
    }
    static add_testhashu64_fnv1a(builder, testhashu64_fnv1a) {
        builder.addFieldInt64(23, testhashu64_fnv1a, BigInt('0'));
    }
    static add_testarrayofbools(builder, testarrayofboolsOffset) {
        builder.addFieldOffset(24, testarrayofboolsOffset, 0);
    }
    static create_testarrayofbools_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(+data[i]);
        }
        return builder.endVector();
    }
    static start_testarrayofbools_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_testf(builder, testf) {
        builder.addFieldFloat32(25, testf, 3.14159);
    }
    static add_testf2(builder, testf2) {
        builder.addFieldFloat32(26, testf2, 3.0);
    }
    static add_testf3(builder, testf3) {
        builder.addFieldFloat32(27, testf3, 0.0);
    }
    static add_testarrayofstring2(builder, testarrayofstring2Offset) {
        builder.addFieldOffset(28, testarrayofstring2Offset, 0);
    }
    static create_testarrayofstring2_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_testarrayofstring2_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_testarrayofsortedstruct(builder, testarrayofsortedstructOffset) {
        builder.addFieldOffset(29, testarrayofsortedstructOffset, 0);
    }
    static start_testarrayofsortedstruct_Vector(builder, numElems) {
        builder.startVector(8, numElems, 4);
    }
    static add_flex(builder, flexOffset) {
        builder.addFieldOffset(30, flexOffset, 0);
    }
    static create_flex_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static start_flex_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_test5(builder, test5Offset) {
        builder.addFieldOffset(31, test5Offset, 0);
    }
    static start_test5_Vector(builder, numElems) {
        builder.startVector(4, numElems, 2);
    }
    static add_vector_of_longs(builder, vector_of_longsOffset) {
        builder.addFieldOffset(32, vector_of_longsOffset, 0);
    }
    static create_vector_of_longs_Vector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_longs_Vector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static add_vector_of_doubles(builder, vector_of_doublesOffset) {
        builder.addFieldOffset(33, vector_of_doublesOffset, 0);
    }
    static create_vector_of_doubles_Vector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat64(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_doubles_Vector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static add_parent_namespace_test(builder, parent_namespace_testOffset) {
        builder.addFieldOffset(34, parent_namespace_testOffset, 0);
    }
    static add_vector_of_referrables(builder, vector_of_referrablesOffset) {
        builder.addFieldOffset(35, vector_of_referrablesOffset, 0);
    }
    static create_vector_of_referrables_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_referrables_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_single_weak_reference(builder, single_weak_reference) {
        builder.addFieldInt64(36, single_weak_reference, BigInt('0'));
    }
    static add_vector_of_weak_references(builder, vector_of_weak_referencesOffset) {
        builder.addFieldOffset(37, vector_of_weak_referencesOffset, 0);
    }
    static create_vector_of_weak_references_Vector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_weak_references_Vector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static add_vector_of_strong_referrables(builder, vector_of_strong_referrablesOffset) {
        builder.addFieldOffset(38, vector_of_strong_referrablesOffset, 0);
    }
    static create_vector_of_strong_referrables_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_strong_referrables_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_co_owning_reference(builder, co_owning_reference) {
        builder.addFieldInt64(39, co_owning_reference, BigInt('0'));
    }
    static add_vector_of_co_owning_references(builder, vector_of_co_owning_referencesOffset) {
        builder.addFieldOffset(40, vector_of_co_owning_referencesOffset, 0);
    }
    static create_vector_of_co_owning_references_Vector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_co_owning_references_Vector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static add_non_owning_reference(builder, non_owning_reference) {
        builder.addFieldInt64(41, non_owning_reference, BigInt('0'));
    }
    static add_vector_of_non_owning_references(builder, vector_of_non_owning_referencesOffset) {
        builder.addFieldOffset(42, vector_of_non_owning_referencesOffset, 0);
    }
    static create_vector_of_non_owning_references_Vector(builder, data) {
        builder.startVector(8, data.length, 8);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt64(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_non_owning_references_Vector(builder, numElems) {
        builder.startVector(8, numElems, 8);
    }
    static add_any_unique_type(builder, any_unique_type) {
        builder.addFieldInt8(43, any_unique_type, AnyUniqueAliases.NONE);
    }
    static add_any_unique(builder, any_uniqueOffset) {
        builder.addFieldOffset(44, any_uniqueOffset, 0);
    }
    static add_any_ambiguous_type(builder, any_ambiguous_type) {
        builder.addFieldInt8(45, any_ambiguous_type, AnyAmbiguousAliases.NONE);
    }
    static add_any_ambiguous(builder, any_ambiguousOffset) {
        builder.addFieldOffset(46, any_ambiguousOffset, 0);
    }
    static add_vector_of_enums(builder, vector_of_enumsOffset) {
        builder.addFieldOffset(47, vector_of_enumsOffset, 0);
    }
    static create_vector_of_enums_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static start_vector_of_enums_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_signed_enum(builder, signed_enum) {
        builder.addFieldInt8(48, signed_enum, Race.None);
    }
    static add_testrequirednestedflatbuffer(builder, testrequirednestedflatbufferOffset) {
        builder.addFieldOffset(49, testrequirednestedflatbufferOffset, 0);
    }
    static create_testrequirednestedflatbuffer_Vector(builder, data) {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    }
    static start_testrequirednestedflatbuffer_Vector(builder, numElems) {
        builder.startVector(1, numElems, 1);
    }
    static add_scalar_key_sorted_tables(builder, scalar_key_sorted_tablesOffset) {
        builder.addFieldOffset(50, scalar_key_sorted_tablesOffset, 0);
    }
    static create_scalar_key_sorted_tables_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_scalar_key_sorted_tables_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_native_inline(builder, native_inlineOffset) {
        builder.addFieldStruct(51, native_inlineOffset, 0);
    }
    static add_long_enum_non_enum_default(builder, long_enum_non_enum_default) {
        builder.addFieldInt64(52, long_enum_non_enum_default, BigInt('0'));
    }
    static add_long_enum_normal_default(builder, long_enum_normal_default) {
        builder.addFieldInt64(53, long_enum_normal_default, BigInt('2'));
    }
    static add_nan_default(builder, nan_default) {
        builder.addFieldFloat32(54, nan_default, NaN);
    }
    static add_inf_default(builder, inf_default) {
        builder.addFieldFloat32(55, inf_default, Infinity);
    }
    static add_positive_inf_default(builder, positive_inf_default) {
        builder.addFieldFloat32(56, positive_inf_default, Infinity);
    }
    static add_infinity_default(builder, infinity_default) {
        builder.addFieldFloat32(57, infinity_default, Infinity);
    }
    static add_positive_infinity_default(builder, positive_infinity_default) {
        builder.addFieldFloat32(58, positive_infinity_default, Infinity);
    }
    static add_negative_inf_default(builder, negative_inf_default) {
        builder.addFieldFloat32(59, negative_inf_default, -Infinity);
    }
    static add_negative_infinity_default(builder, negative_infinity_default) {
        builder.addFieldFloat32(60, negative_infinity_default, -Infinity);
    }
    static add_double_inf_default(builder, double_inf_default) {
        builder.addFieldFloat64(61, double_inf_default, Infinity);
    }
    static endMonster(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 10); // name
        return offset;
    }
    static finishMonsterBuffer(builder, offset) {
        builder.finish(offset, 'MONS');
    }
    static finishSizePrefixedMonsterBuffer(builder, offset) {
        builder.finish(offset, 'MONS', true);
    }
    serialize() {
        return this.bb.bytes();
    }
    static deserialize(buffer) {
        return Monster.getRootAsMonster(new flatbuffers.ByteBuffer(buffer));
    }
    unpack() {
        return new MonsterT((this.pos() !== null ? this.pos().unpack() : null), this.mana(), this.hp(), this.name(), this.bb.createScalarList(this.inventory.bind(this), this.inventory_Length()), this.color(), this.test_type(), (() => {
            const temp = unionToAny(this.test_type(), this.test.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.bb.createObjList(this.test4.bind(this), this.test4_Length()), this.bb.createScalarList(this.testarrayofstring.bind(this), this.testarrayofstring_Length()), this.bb.createObjList(this.testarrayoftables.bind(this), this.testarrayoftables_Length()), (this.enemy() !== null ? this.enemy().unpack() : null), this.bb.createScalarList(this.testnestedflatbuffer.bind(this), this.testnestedflatbuffer_Length()), (this.testempty() !== null ? this.testempty().unpack() : null), this.testbool(), this.testhashs32_fnv1(), this.testhashu32_fnv1(), this.testhashs64_fnv1(), this.testhashu64_fnv1(), this.testhashs32_fnv1a(), this.testhashu32_fnv1a(), this.testhashs64_fnv1a(), this.testhashu64_fnv1a(), this.bb.createScalarList(this.testarrayofbools.bind(this), this.testarrayofbools_Length()), this.testf(), this.testf2(), this.testf3(), this.bb.createScalarList(this.testarrayofstring2.bind(this), this.testarrayofstring2_Length()), this.bb.createObjList(this.testarrayofsortedstruct.bind(this), this.testarrayofsortedstruct_Length()), this.bb.createScalarList(this.flex.bind(this), this.flex_Length()), this.bb.createObjList(this.test5.bind(this), this.test5_Length()), this.bb.createScalarList(this.vector_of_longs.bind(this), this.vector_of_longs_Length()), this.bb.createScalarList(this.vector_of_doubles.bind(this), this.vector_of_doubles_Length()), (this.parent_namespace_test() !== null ? this.parent_namespace_test().unpack() : null), this.bb.createObjList(this.vector_of_referrables.bind(this), this.vector_of_referrables_Length()), this.single_weak_reference(), this.bb.createScalarList(this.vector_of_weak_references.bind(this), this.vector_of_weak_references_Length()), this.bb.createObjList(this.vector_of_strong_referrables.bind(this), this.vector_of_strong_referrables_Length()), this.co_owning_reference(), this.bb.createScalarList(this.vector_of_co_owning_references.bind(this), this.vector_of_co_owning_references_Length()), this.non_owning_reference(), this.bb.createScalarList(this.vector_of_non_owning_references.bind(this), this.vector_of_non_owning_references_Length()), this.any_unique_type(), (() => {
            const temp = unionToAnyUniqueAliases(this.any_unique_type(), this.any_unique.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.any_ambiguous_type(), (() => {
            const temp = unionToAnyAmbiguousAliases(this.any_ambiguous_type(), this.any_ambiguous.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })(), this.bb.createScalarList(this.vector_of_enums.bind(this), this.vector_of_enums_Length()), this.signed_enum(), this.bb.createScalarList(this.testrequirednestedflatbuffer.bind(this), this.testrequirednestedflatbuffer_Length()), this.bb.createObjList(this.scalar_key_sorted_tables.bind(this), this.scalar_key_sorted_tables_Length()), (this.native_inline() !== null ? this.native_inline().unpack() : null), this.long_enum_non_enum_default(), this.long_enum_normal_default(), this.nan_default(), this.inf_default(), this.positive_inf_default(), this.infinity_default(), this.positive_infinity_default(), this.negative_inf_default(), this.negative_infinity_default(), this.double_inf_default());
    }
    unpackTo(_o) {
        _o.pos = (this.pos() !== null ? this.pos().unpack() : null);
        _o.mana = this.mana();
        _o.hp = this.hp();
        _o.name = this.name();
        _o.inventory = this.bb.createScalarList(this.inventory.bind(this), this.inventory_Length());
        _o.color = this.color();
        _o.test_type = this.test_type();
        _o.test = (() => {
            const temp = unionToAny(this.test_type(), this.test.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.test4 = this.bb.createObjList(this.test4.bind(this), this.test4_Length());
        _o.testarrayofstring = this.bb.createScalarList(this.testarrayofstring.bind(this), this.testarrayofstring_Length());
        _o.testarrayoftables = this.bb.createObjList(this.testarrayoftables.bind(this), this.testarrayoftables_Length());
        _o.enemy = (this.enemy() !== null ? this.enemy().unpack() : null);
        _o.testnestedflatbuffer = this.bb.createScalarList(this.testnestedflatbuffer.bind(this), this.testnestedflatbuffer_Length());
        _o.testempty = (this.testempty() !== null ? this.testempty().unpack() : null);
        _o.testbool = this.testbool();
        _o.testhashs32_fnv1 = this.testhashs32_fnv1();
        _o.testhashu32_fnv1 = this.testhashu32_fnv1();
        _o.testhashs64_fnv1 = this.testhashs64_fnv1();
        _o.testhashu64_fnv1 = this.testhashu64_fnv1();
        _o.testhashs32_fnv1a = this.testhashs32_fnv1a();
        _o.testhashu32_fnv1a = this.testhashu32_fnv1a();
        _o.testhashs64_fnv1a = this.testhashs64_fnv1a();
        _o.testhashu64_fnv1a = this.testhashu64_fnv1a();
        _o.testarrayofbools = this.bb.createScalarList(this.testarrayofbools.bind(this), this.testarrayofbools_Length());
        _o.testf = this.testf();
        _o.testf2 = this.testf2();
        _o.testf3 = this.testf3();
        _o.testarrayofstring2 = this.bb.createScalarList(this.testarrayofstring2.bind(this), this.testarrayofstring2_Length());
        _o.testarrayofsortedstruct = this.bb.createObjList(this.testarrayofsortedstruct.bind(this), this.testarrayofsortedstruct_Length());
        _o.flex = this.bb.createScalarList(this.flex.bind(this), this.flex_Length());
        _o.test5 = this.bb.createObjList(this.test5.bind(this), this.test5_Length());
        _o.vector_of_longs = this.bb.createScalarList(this.vector_of_longs.bind(this), this.vector_of_longs_Length());
        _o.vector_of_doubles = this.bb.createScalarList(this.vector_of_doubles.bind(this), this.vector_of_doubles_Length());
        _o.parent_namespace_test = (this.parent_namespace_test() !== null ? this.parent_namespace_test().unpack() : null);
        _o.vector_of_referrables = this.bb.createObjList(this.vector_of_referrables.bind(this), this.vector_of_referrables_Length());
        _o.single_weak_reference = this.single_weak_reference();
        _o.vector_of_weak_references = this.bb.createScalarList(this.vector_of_weak_references.bind(this), this.vector_of_weak_references_Length());
        _o.vector_of_strong_referrables = this.bb.createObjList(this.vector_of_strong_referrables.bind(this), this.vector_of_strong_referrables_Length());
        _o.co_owning_reference = this.co_owning_reference();
        _o.vector_of_co_owning_references = this.bb.createScalarList(this.vector_of_co_owning_references.bind(this), this.vector_of_co_owning_references_Length());
        _o.non_owning_reference = this.non_owning_reference();
        _o.vector_of_non_owning_references = this.bb.createScalarList(this.vector_of_non_owning_references.bind(this), this.vector_of_non_owning_references_Length());
        _o.any_unique_type = this.any_unique_type();
        _o.any_unique = (() => {
            const temp = unionToAnyUniqueAliases(this.any_unique_type(), this.any_unique.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.any_ambiguous_type = this.any_ambiguous_type();
        _o.any_ambiguous = (() => {
            const temp = unionToAnyAmbiguousAliases(this.any_ambiguous_type(), this.any_ambiguous.bind(this));
            if (temp === null) {
                return null;
            }
            return temp.unpack();
        })();
        _o.vector_of_enums = this.bb.createScalarList(this.vector_of_enums.bind(this), this.vector_of_enums_Length());
        _o.signed_enum = this.signed_enum();
        _o.testrequirednestedflatbuffer = this.bb.createScalarList(this.testrequirednestedflatbuffer.bind(this), this.testrequirednestedflatbuffer_Length());
        _o.scalar_key_sorted_tables = this.bb.createObjList(this.scalar_key_sorted_tables.bind(this), this.scalar_key_sorted_tables_Length());
        _o.native_inline = (this.native_inline() !== null ? this.native_inline().unpack() : null);
        _o.long_enum_non_enum_default = this.long_enum_non_enum_default();
        _o.long_enum_normal_default = this.long_enum_normal_default();
        _o.nan_default = this.nan_default();
        _o.inf_default = this.inf_default();
        _o.positive_inf_default = this.positive_inf_default();
        _o.infinity_default = this.infinity_default();
        _o.positive_infinity_default = this.positive_infinity_default();
        _o.negative_inf_default = this.negative_inf_default();
        _o.negative_infinity_default = this.negative_infinity_default();
        _o.double_inf_default = this.double_inf_default();
    }
}
export class MonsterT {
    constructor(pos = null, mana = 150, hp = 100, name = null, inventory = [], color = Color.Blue, test_type = Any.NONE, test = null, test4 = [], testarrayofstring = [], testarrayoftables = [], enemy = null, testnestedflatbuffer = [], testempty = null, testbool = false, testhashs32_fnv1 = 0, testhashu32_fnv1 = 0, testhashs64_fnv1 = BigInt('0'), testhashu64_fnv1 = BigInt('0'), testhashs32_fnv1a = 0, testhashu32_fnv1a = 0, testhashs64_fnv1a = BigInt('0'), testhashu64_fnv1a = BigInt('0'), testarrayofbools = [], testf = 3.14159, testf2 = 3.0, testf3 = 0.0, testarrayofstring2 = [], testarrayofsortedstruct = [], flex = [], test5 = [], vector_of_longs = [], vector_of_doubles = [], parent_namespace_test = null, vector_of_referrables = [], single_weak_reference = BigInt('0'), vector_of_weak_references = [], vector_of_strong_referrables = [], co_owning_reference = BigInt('0'), vector_of_co_owning_references = [], non_owning_reference = BigInt('0'), vector_of_non_owning_references = [], any_unique_type = AnyUniqueAliases.NONE, any_unique = null, any_ambiguous_type = AnyAmbiguousAliases.NONE, any_ambiguous = null, vector_of_enums = [], signed_enum = Race.None, testrequirednestedflatbuffer = [], scalar_key_sorted_tables = [], native_inline = null, long_enum_non_enum_default = BigInt('0'), long_enum_normal_default = BigInt('2'), nan_default = NaN, inf_default = Infinity, positive_inf_default = Infinity, infinity_default = Infinity, positive_infinity_default = Infinity, negative_inf_default = -Infinity, negative_infinity_default = -Infinity, double_inf_default = Infinity) {
        this.pos = pos;
        this.mana = mana;
        this.hp = hp;
        this.name = name;
        this.inventory = inventory;
        this.color = color;
        this.test_type = test_type;
        this.test = test;
        this.test4 = test4;
        this.testarrayofstring = testarrayofstring;
        this.testarrayoftables = testarrayoftables;
        this.enemy = enemy;
        this.testnestedflatbuffer = testnestedflatbuffer;
        this.testempty = testempty;
        this.testbool = testbool;
        this.testhashs32_fnv1 = testhashs32_fnv1;
        this.testhashu32_fnv1 = testhashu32_fnv1;
        this.testhashs64_fnv1 = testhashs64_fnv1;
        this.testhashu64_fnv1 = testhashu64_fnv1;
        this.testhashs32_fnv1a = testhashs32_fnv1a;
        this.testhashu32_fnv1a = testhashu32_fnv1a;
        this.testhashs64_fnv1a = testhashs64_fnv1a;
        this.testhashu64_fnv1a = testhashu64_fnv1a;
        this.testarrayofbools = testarrayofbools;
        this.testf = testf;
        this.testf2 = testf2;
        this.testf3 = testf3;
        this.testarrayofstring2 = testarrayofstring2;
        this.testarrayofsortedstruct = testarrayofsortedstruct;
        this.flex = flex;
        this.test5 = test5;
        this.vector_of_longs = vector_of_longs;
        this.vector_of_doubles = vector_of_doubles;
        this.parent_namespace_test = parent_namespace_test;
        this.vector_of_referrables = vector_of_referrables;
        this.single_weak_reference = single_weak_reference;
        this.vector_of_weak_references = vector_of_weak_references;
        this.vector_of_strong_referrables = vector_of_strong_referrables;
        this.co_owning_reference = co_owning_reference;
        this.vector_of_co_owning_references = vector_of_co_owning_references;
        this.non_owning_reference = non_owning_reference;
        this.vector_of_non_owning_references = vector_of_non_owning_references;
        this.any_unique_type = any_unique_type;
        this.any_unique = any_unique;
        this.any_ambiguous_type = any_ambiguous_type;
        this.any_ambiguous = any_ambiguous;
        this.vector_of_enums = vector_of_enums;
        this.signed_enum = signed_enum;
        this.testrequirednestedflatbuffer = testrequirednestedflatbuffer;
        this.scalar_key_sorted_tables = scalar_key_sorted_tables;
        this.native_inline = native_inline;
        this.long_enum_non_enum_default = long_enum_non_enum_default;
        this.long_enum_normal_default = long_enum_normal_default;
        this.nan_default = nan_default;
        this.inf_default = inf_default;
        this.positive_inf_default = positive_inf_default;
        this.infinity_default = infinity_default;
        this.positive_infinity_default = positive_infinity_default;
        this.negative_inf_default = negative_inf_default;
        this.negative_infinity_default = negative_infinity_default;
        this.double_inf_default = double_inf_default;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const inventory = Monster.create_inventory_Vector(builder, this.inventory);
        const test = builder.createObjectOffset(this.test);
        const test4 = builder.createStructOffsetList(this.test4, Monster.start_test4_Vector);
        const testarrayofstring = Monster.create_testarrayofstring_Vector(builder, builder.createObjectOffsetList(this.testarrayofstring));
        const testarrayoftables = Monster.create_testarrayoftables_Vector(builder, builder.createObjectOffsetList(this.testarrayoftables));
        const enemy = (this.enemy !== null ? this.enemy.pack(builder) : 0);
        const testnestedflatbuffer = Monster.create_testnestedflatbuffer_Vector(builder, this.testnestedflatbuffer);
        const testempty = (this.testempty !== null ? this.testempty.pack(builder) : 0);
        const testarrayofbools = Monster.create_testarrayofbools_Vector(builder, this.testarrayofbools);
        const testarrayofstring2 = Monster.create_testarrayofstring2_Vector(builder, builder.createObjectOffsetList(this.testarrayofstring2));
        const testarrayofsortedstruct = builder.createStructOffsetList(this.testarrayofsortedstruct, Monster.start_testarrayofsortedstruct_Vector);
        const flex = Monster.create_flex_Vector(builder, this.flex);
        const test5 = builder.createStructOffsetList(this.test5, Monster.start_test5_Vector);
        const vector_of_longs = Monster.create_vector_of_longs_Vector(builder, this.vector_of_longs);
        const vector_of_doubles = Monster.create_vector_of_doubles_Vector(builder, this.vector_of_doubles);
        const parent_namespace_test = (this.parent_namespace_test !== null ? this.parent_namespace_test.pack(builder) : 0);
        const vector_of_referrables = Monster.create_vector_of_referrables_Vector(builder, builder.createObjectOffsetList(this.vector_of_referrables));
        const vector_of_weak_references = Monster.create_vector_of_weak_references_Vector(builder, this.vector_of_weak_references);
        const vector_of_strong_referrables = Monster.create_vector_of_strong_referrables_Vector(builder, builder.createObjectOffsetList(this.vector_of_strong_referrables));
        const vector_of_co_owning_references = Monster.create_vector_of_co_owning_references_Vector(builder, this.vector_of_co_owning_references);
        const vector_of_non_owning_references = Monster.create_vector_of_non_owning_references_Vector(builder, this.vector_of_non_owning_references);
        const any_unique = builder.createObjectOffset(this.any_unique);
        const any_ambiguous = builder.createObjectOffset(this.any_ambiguous);
        const vector_of_enums = Monster.create_vector_of_enums_Vector(builder, this.vector_of_enums);
        const testrequirednestedflatbuffer = Monster.create_testrequirednestedflatbuffer_Vector(builder, this.testrequirednestedflatbuffer);
        const scalar_key_sorted_tables = Monster.create_scalar_key_sorted_tables_Vector(builder, builder.createObjectOffsetList(this.scalar_key_sorted_tables));
        Monster.startMonster(builder);
        Monster.add_pos(builder, (this.pos !== null ? this.pos.pack(builder) : 0));
        Monster.add_mana(builder, this.mana);
        Monster.add_hp(builder, this.hp);
        Monster.add_name(builder, name);
        Monster.add_inventory(builder, inventory);
        Monster.add_color(builder, this.color);
        Monster.add_test_type(builder, this.test_type);
        Monster.add_test(builder, test);
        Monster.add_test4(builder, test4);
        Monster.add_testarrayofstring(builder, testarrayofstring);
        Monster.add_testarrayoftables(builder, testarrayoftables);
        Monster.add_enemy(builder, enemy);
        Monster.add_testnestedflatbuffer(builder, testnestedflatbuffer);
        Monster.add_testempty(builder, testempty);
        Monster.add_testbool(builder, this.testbool);
        Monster.add_testhashs32_fnv1(builder, this.testhashs32_fnv1);
        Monster.add_testhashu32_fnv1(builder, this.testhashu32_fnv1);
        Monster.add_testhashs64_fnv1(builder, this.testhashs64_fnv1);
        Monster.add_testhashu64_fnv1(builder, this.testhashu64_fnv1);
        Monster.add_testhashs32_fnv1a(builder, this.testhashs32_fnv1a);
        Monster.add_testhashu32_fnv1a(builder, this.testhashu32_fnv1a);
        Monster.add_testhashs64_fnv1a(builder, this.testhashs64_fnv1a);
        Monster.add_testhashu64_fnv1a(builder, this.testhashu64_fnv1a);
        Monster.add_testarrayofbools(builder, testarrayofbools);
        Monster.add_testf(builder, this.testf);
        Monster.add_testf2(builder, this.testf2);
        Monster.add_testf3(builder, this.testf3);
        Monster.add_testarrayofstring2(builder, testarrayofstring2);
        Monster.add_testarrayofsortedstruct(builder, testarrayofsortedstruct);
        Monster.add_flex(builder, flex);
        Monster.add_test5(builder, test5);
        Monster.add_vector_of_longs(builder, vector_of_longs);
        Monster.add_vector_of_doubles(builder, vector_of_doubles);
        Monster.add_parent_namespace_test(builder, parent_namespace_test);
        Monster.add_vector_of_referrables(builder, vector_of_referrables);
        Monster.add_single_weak_reference(builder, this.single_weak_reference);
        Monster.add_vector_of_weak_references(builder, vector_of_weak_references);
        Monster.add_vector_of_strong_referrables(builder, vector_of_strong_referrables);
        Monster.add_co_owning_reference(builder, this.co_owning_reference);
        Monster.add_vector_of_co_owning_references(builder, vector_of_co_owning_references);
        Monster.add_non_owning_reference(builder, this.non_owning_reference);
        Monster.add_vector_of_non_owning_references(builder, vector_of_non_owning_references);
        Monster.add_any_unique_type(builder, this.any_unique_type);
        Monster.add_any_unique(builder, any_unique);
        Monster.add_any_ambiguous_type(builder, this.any_ambiguous_type);
        Monster.add_any_ambiguous(builder, any_ambiguous);
        Monster.add_vector_of_enums(builder, vector_of_enums);
        Monster.add_signed_enum(builder, this.signed_enum);
        Monster.add_testrequirednestedflatbuffer(builder, testrequirednestedflatbuffer);
        Monster.add_scalar_key_sorted_tables(builder, scalar_key_sorted_tables);
        Monster.add_native_inline(builder, (this.native_inline !== null ? this.native_inline.pack(builder) : 0));
        Monster.add_long_enum_non_enum_default(builder, this.long_enum_non_enum_default);
        Monster.add_long_enum_normal_default(builder, this.long_enum_normal_default);
        Monster.add_nan_default(builder, this.nan_default);
        Monster.add_inf_default(builder, this.inf_default);
        Monster.add_positive_inf_default(builder, this.positive_inf_default);
        Monster.add_infinity_default(builder, this.infinity_default);
        Monster.add_positive_infinity_default(builder, this.positive_infinity_default);
        Monster.add_negative_inf_default(builder, this.negative_inf_default);
        Monster.add_negative_infinity_default(builder, this.negative_infinity_default);
        Monster.add_double_inf_default(builder, this.double_inf_default);
        return Monster.endMonster(builder);
    }
}
