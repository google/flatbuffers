import * as flatbuffers from 'flatbuffers';
import { MonsterT as MyGame_Example2_MonsterT } from '../../MyGame/Example2/Monster.js';
import { Ability, AbilityT } from '../../MyGame/Example/Ability.js';
import { Any } from '../../MyGame/Example/Any.js';
import { AnyAmbiguousAliases } from '../../MyGame/Example/AnyAmbiguousAliases.js';
import { AnyUniqueAliases } from '../../MyGame/Example/AnyUniqueAliases.js';
import { Color } from '../../MyGame/Example/Color.js';
import { Race } from '../../MyGame/Example/Race.js';
import { Referrable, ReferrableT } from '../../MyGame/Example/Referrable.js';
import { Stat, StatT } from '../../MyGame/Example/Stat.js';
import { Test, TestT } from '../../MyGame/Example/Test.js';
import { TestSimpleTableWithEnumT } from '../../MyGame/Example/TestSimpleTableWithEnum.js';
import { Vec3, Vec3T } from '../../MyGame/Example/Vec3.js';
import { InParentNamespace, InParentNamespaceT } from '../../MyGame/InParentNamespace.js';
/**
 * an example documentation comment: "monster object"
 */
export declare class Monster implements flatbuffers.IUnpackableObject<MonsterT> {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): Monster;
    static getRootAsMonster(bb: flatbuffers.ByteBuffer, obj?: Monster): Monster;
    static getSizePrefixedRootAsMonster(bb: flatbuffers.ByteBuffer, obj?: Monster): Monster;
    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean;
    pos(obj?: Vec3): Vec3 | null;
    mana(): number;
    mutate_mana(value: number): boolean;
    hp(): number;
    mutate_hp(value: number): boolean;
    name(): string | null;
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    inventory(index: number): number | null;
    inventory_Length(): number;
    inventory_Array(): Uint8Array | null;
    color(): Color;
    mutate_color(value: Color): boolean;
    test_type(): Any;
    test<T extends flatbuffers.Table>(obj: any): any | null;
    test4(index: number, obj?: Test): Test | null;
    test4_Length(): number;
    testarrayofstring(index: number): string;
    testarrayofstring(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    testarrayofstring_Length(): number;
    /**
     * an example documentation comment: this will end up in the generated code
     * multiline too
     */
    testarrayoftables(index: number, obj?: Monster): Monster | null;
    testarrayoftables_Length(): number;
    enemy(obj?: Monster): Monster | null;
    testnestedflatbuffer(index: number): number | null;
    testnestedflatbuffer_Length(): number;
    testnestedflatbuffer_Array(): Uint8Array | null;
    testempty(obj?: Stat): Stat | null;
    testbool(): boolean;
    mutate_testbool(value: boolean): boolean;
    testhashs32_fnv1(): number;
    mutate_testhashs32_fnv1(value: number): boolean;
    testhashu32_fnv1(): number;
    mutate_testhashu32_fnv1(value: number): boolean;
    testhashs64_fnv1(): bigint;
    mutate_testhashs64_fnv1(value: bigint): boolean;
    testhashu64_fnv1(): bigint;
    mutate_testhashu64_fnv1(value: bigint): boolean;
    testhashs32_fnv1a(): number;
    mutate_testhashs32_fnv1a(value: number): boolean;
    testhashu32_fnv1a(): number;
    mutate_testhashu32_fnv1a(value: number): boolean;
    testhashs64_fnv1a(): bigint;
    mutate_testhashs64_fnv1a(value: bigint): boolean;
    testhashu64_fnv1a(): bigint;
    mutate_testhashu64_fnv1a(value: bigint): boolean;
    testarrayofbools(index: number): boolean | null;
    testarrayofbools_Length(): number;
    testarrayofbools_Array(): Int8Array | null;
    testf(): number;
    mutate_testf(value: number): boolean;
    testf2(): number;
    mutate_testf2(value: number): boolean;
    testf3(): number;
    mutate_testf3(value: number): boolean;
    testarrayofstring2(index: number): string;
    testarrayofstring2(index: number, optionalEncoding: flatbuffers.Encoding): string | Uint8Array;
    testarrayofstring2_Length(): number;
    testarrayofsortedstruct(index: number, obj?: Ability): Ability | null;
    testarrayofsortedstruct_Length(): number;
    flex(index: number): number | null;
    flex_Length(): number;
    flex_Array(): Uint8Array | null;
    test5(index: number, obj?: Test): Test | null;
    test5_Length(): number;
    vector_of_longs(index: number): bigint | null;
    vector_of_longs_Length(): number;
    vector_of_doubles(index: number): number | null;
    vector_of_doubles_Length(): number;
    vector_of_doubles_Array(): Float64Array | null;
    parent_namespace_test(obj?: InParentNamespace): InParentNamespace | null;
    vector_of_referrables(index: number, obj?: Referrable): Referrable | null;
    vector_of_referrables_Length(): number;
    single_weak_reference(): bigint;
    mutate_single_weak_reference(value: bigint): boolean;
    vector_of_weak_references(index: number): bigint | null;
    vector_of_weak_references_Length(): number;
    vector_of_strong_referrables(index: number, obj?: Referrable): Referrable | null;
    vector_of_strong_referrables_Length(): number;
    co_owning_reference(): bigint;
    mutate_co_owning_reference(value: bigint): boolean;
    vector_of_co_owning_references(index: number): bigint | null;
    vector_of_co_owning_references_Length(): number;
    non_owning_reference(): bigint;
    mutate_non_owning_reference(value: bigint): boolean;
    vector_of_non_owning_references(index: number): bigint | null;
    vector_of_non_owning_references_Length(): number;
    any_unique_type(): AnyUniqueAliases;
    any_unique<T extends flatbuffers.Table>(obj: any): any | null;
    any_ambiguous_type(): AnyAmbiguousAliases;
    any_ambiguous<T extends flatbuffers.Table>(obj: any): any | null;
    vector_of_enums(index: number): Color | null;
    vector_of_enums_Length(): number;
    vector_of_enums_Array(): Uint8Array | null;
    signed_enum(): Race;
    mutate_signed_enum(value: Race): boolean;
    testrequirednestedflatbuffer(index: number): number | null;
    testrequirednestedflatbuffer_Length(): number;
    testrequirednestedflatbuffer_Array(): Uint8Array | null;
    scalar_key_sorted_tables(index: number, obj?: Stat): Stat | null;
    scalar_key_sorted_tables_Length(): number;
    native_inline(obj?: Test): Test | null;
    long_enum_non_enum_default(): bigint;
    mutate_long_enum_non_enum_default(value: bigint): boolean;
    long_enum_normal_default(): bigint;
    mutate_long_enum_normal_default(value: bigint): boolean;
    nan_default(): number;
    mutate_nan_default(value: number): boolean;
    inf_default(): number;
    mutate_inf_default(value: number): boolean;
    positive_inf_default(): number;
    mutate_positive_inf_default(value: number): boolean;
    infinity_default(): number;
    mutate_infinity_default(value: number): boolean;
    positive_infinity_default(): number;
    mutate_positive_infinity_default(value: number): boolean;
    negative_inf_default(): number;
    mutate_negative_inf_default(value: number): boolean;
    negative_infinity_default(): number;
    mutate_negative_infinity_default(value: number): boolean;
    double_inf_default(): number;
    mutate_double_inf_default(value: number): boolean;
    static getFullyQualifiedName(): string;
    static startMonster(builder: flatbuffers.Builder): void;
    static add_pos(builder: flatbuffers.Builder, posOffset: flatbuffers.Offset): void;
    static add_mana(builder: flatbuffers.Builder, mana: number): void;
    static add_hp(builder: flatbuffers.Builder, hp: number): void;
    static add_name(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset): void;
    static add_inventory(builder: flatbuffers.Builder, inventoryOffset: flatbuffers.Offset): void;
    static create_inventory_Vector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static start_inventory_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_color(builder: flatbuffers.Builder, color: Color): void;
    static add_test_type(builder: flatbuffers.Builder, test_type: Any): void;
    static add_test(builder: flatbuffers.Builder, testOffset: flatbuffers.Offset): void;
    static add_test4(builder: flatbuffers.Builder, test4Offset: flatbuffers.Offset): void;
    static start_test4_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_testarrayofstring(builder: flatbuffers.Builder, testarrayofstringOffset: flatbuffers.Offset): void;
    static create_testarrayofstring_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_testarrayofstring_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_testarrayoftables(builder: flatbuffers.Builder, testarrayoftablesOffset: flatbuffers.Offset): void;
    static create_testarrayoftables_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_testarrayoftables_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_enemy(builder: flatbuffers.Builder, enemyOffset: flatbuffers.Offset): void;
    static add_testnestedflatbuffer(builder: flatbuffers.Builder, testnestedflatbufferOffset: flatbuffers.Offset): void;
    static create_testnestedflatbuffer_Vector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static start_testnestedflatbuffer_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_testempty(builder: flatbuffers.Builder, testemptyOffset: flatbuffers.Offset): void;
    static add_testbool(builder: flatbuffers.Builder, testbool: boolean): void;
    static add_testhashs32_fnv1(builder: flatbuffers.Builder, testhashs32_fnv1: number): void;
    static add_testhashu32_fnv1(builder: flatbuffers.Builder, testhashu32_fnv1: number): void;
    static add_testhashs64_fnv1(builder: flatbuffers.Builder, testhashs64_fnv1: bigint): void;
    static add_testhashu64_fnv1(builder: flatbuffers.Builder, testhashu64_fnv1: bigint): void;
    static add_testhashs32_fnv1a(builder: flatbuffers.Builder, testhashs32_fnv1a: number): void;
    static add_testhashu32_fnv1a(builder: flatbuffers.Builder, testhashu32_fnv1a: number): void;
    static add_testhashs64_fnv1a(builder: flatbuffers.Builder, testhashs64_fnv1a: bigint): void;
    static add_testhashu64_fnv1a(builder: flatbuffers.Builder, testhashu64_fnv1a: bigint): void;
    static add_testarrayofbools(builder: flatbuffers.Builder, testarrayofboolsOffset: flatbuffers.Offset): void;
    static create_testarrayofbools_Vector(builder: flatbuffers.Builder, data: boolean[]): flatbuffers.Offset;
    static start_testarrayofbools_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_testf(builder: flatbuffers.Builder, testf: number): void;
    static add_testf2(builder: flatbuffers.Builder, testf2: number): void;
    static add_testf3(builder: flatbuffers.Builder, testf3: number): void;
    static add_testarrayofstring2(builder: flatbuffers.Builder, testarrayofstring2Offset: flatbuffers.Offset): void;
    static create_testarrayofstring2_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_testarrayofstring2_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_testarrayofsortedstruct(builder: flatbuffers.Builder, testarrayofsortedstructOffset: flatbuffers.Offset): void;
    static start_testarrayofsortedstruct_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_flex(builder: flatbuffers.Builder, flexOffset: flatbuffers.Offset): void;
    static create_flex_Vector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static start_flex_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_test5(builder: flatbuffers.Builder, test5Offset: flatbuffers.Offset): void;
    static start_test5_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_vector_of_longs(builder: flatbuffers.Builder, vector_of_longsOffset: flatbuffers.Offset): void;
    static create_vector_of_longs_Vector(builder: flatbuffers.Builder, data: bigint[]): flatbuffers.Offset;
    static start_vector_of_longs_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_vector_of_doubles(builder: flatbuffers.Builder, vector_of_doublesOffset: flatbuffers.Offset): void;
    static create_vector_of_doubles_Vector(builder: flatbuffers.Builder, data: number[] | Float64Array): flatbuffers.Offset;
    /**
     * @deprecated This Uint8Array overload will be removed in the future.
     */
    static create_vector_of_doubles_Vector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static start_vector_of_doubles_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_parent_namespace_test(builder: flatbuffers.Builder, parent_namespace_testOffset: flatbuffers.Offset): void;
    static add_vector_of_referrables(builder: flatbuffers.Builder, vector_of_referrablesOffset: flatbuffers.Offset): void;
    static create_vector_of_referrables_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_vector_of_referrables_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_single_weak_reference(builder: flatbuffers.Builder, single_weak_reference: bigint): void;
    static add_vector_of_weak_references(builder: flatbuffers.Builder, vector_of_weak_referencesOffset: flatbuffers.Offset): void;
    static create_vector_of_weak_references_Vector(builder: flatbuffers.Builder, data: bigint[]): flatbuffers.Offset;
    static start_vector_of_weak_references_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_vector_of_strong_referrables(builder: flatbuffers.Builder, vector_of_strong_referrablesOffset: flatbuffers.Offset): void;
    static create_vector_of_strong_referrables_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_vector_of_strong_referrables_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_co_owning_reference(builder: flatbuffers.Builder, co_owning_reference: bigint): void;
    static add_vector_of_co_owning_references(builder: flatbuffers.Builder, vector_of_co_owning_referencesOffset: flatbuffers.Offset): void;
    static create_vector_of_co_owning_references_Vector(builder: flatbuffers.Builder, data: bigint[]): flatbuffers.Offset;
    static start_vector_of_co_owning_references_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_non_owning_reference(builder: flatbuffers.Builder, non_owning_reference: bigint): void;
    static add_vector_of_non_owning_references(builder: flatbuffers.Builder, vector_of_non_owning_referencesOffset: flatbuffers.Offset): void;
    static create_vector_of_non_owning_references_Vector(builder: flatbuffers.Builder, data: bigint[]): flatbuffers.Offset;
    static start_vector_of_non_owning_references_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_any_unique_type(builder: flatbuffers.Builder, any_unique_type: AnyUniqueAliases): void;
    static add_any_unique(builder: flatbuffers.Builder, any_uniqueOffset: flatbuffers.Offset): void;
    static add_any_ambiguous_type(builder: flatbuffers.Builder, any_ambiguous_type: AnyAmbiguousAliases): void;
    static add_any_ambiguous(builder: flatbuffers.Builder, any_ambiguousOffset: flatbuffers.Offset): void;
    static add_vector_of_enums(builder: flatbuffers.Builder, vector_of_enumsOffset: flatbuffers.Offset): void;
    static create_vector_of_enums_Vector(builder: flatbuffers.Builder, data: Color[]): flatbuffers.Offset;
    static start_vector_of_enums_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_signed_enum(builder: flatbuffers.Builder, signed_enum: Race): void;
    static add_testrequirednestedflatbuffer(builder: flatbuffers.Builder, testrequirednestedflatbufferOffset: flatbuffers.Offset): void;
    static create_testrequirednestedflatbuffer_Vector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset;
    static start_testrequirednestedflatbuffer_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_scalar_key_sorted_tables(builder: flatbuffers.Builder, scalar_key_sorted_tablesOffset: flatbuffers.Offset): void;
    static create_scalar_key_sorted_tables_Vector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset;
    static start_scalar_key_sorted_tables_Vector(builder: flatbuffers.Builder, numElems: number): void;
    static add_native_inline(builder: flatbuffers.Builder, native_inlineOffset: flatbuffers.Offset): void;
    static add_long_enum_non_enum_default(builder: flatbuffers.Builder, long_enum_non_enum_default: bigint): void;
    static add_long_enum_normal_default(builder: flatbuffers.Builder, long_enum_normal_default: bigint): void;
    static add_nan_default(builder: flatbuffers.Builder, nan_default: number): void;
    static add_inf_default(builder: flatbuffers.Builder, inf_default: number): void;
    static add_positive_inf_default(builder: flatbuffers.Builder, positive_inf_default: number): void;
    static add_infinity_default(builder: flatbuffers.Builder, infinity_default: number): void;
    static add_positive_infinity_default(builder: flatbuffers.Builder, positive_infinity_default: number): void;
    static add_negative_inf_default(builder: flatbuffers.Builder, negative_inf_default: number): void;
    static add_negative_infinity_default(builder: flatbuffers.Builder, negative_infinity_default: number): void;
    static add_double_inf_default(builder: flatbuffers.Builder, double_inf_default: number): void;
    static endMonster(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishMonsterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedMonsterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    serialize(): Uint8Array;
    static deserialize(buffer: Uint8Array): Monster;
    unpack(): MonsterT;
    unpackTo(_o: MonsterT): void;
}
export declare class MonsterT implements flatbuffers.IGeneratedObject {
    pos: Vec3T | null;
    mana: number;
    hp: number;
    name: string | Uint8Array | null;
    inventory: (number)[];
    color: Color;
    test_type: Any;
    test: MonsterT | MyGame_Example2_MonsterT | TestSimpleTableWithEnumT | null;
    test4: (TestT)[];
    testarrayofstring: (string)[];
    testarrayoftables: (MonsterT)[];
    enemy: MonsterT | null;
    testnestedflatbuffer: (number)[];
    testempty: StatT | null;
    testbool: boolean;
    testhashs32_fnv1: number;
    testhashu32_fnv1: number;
    testhashs64_fnv1: bigint;
    testhashu64_fnv1: bigint;
    testhashs32_fnv1a: number;
    testhashu32_fnv1a: number;
    testhashs64_fnv1a: bigint;
    testhashu64_fnv1a: bigint;
    testarrayofbools: (boolean)[];
    testf: number;
    testf2: number;
    testf3: number;
    testarrayofstring2: (string)[];
    testarrayofsortedstruct: (AbilityT)[];
    flex: (number)[];
    test5: (TestT)[];
    vector_of_longs: (bigint)[];
    vector_of_doubles: (number)[];
    parent_namespace_test: InParentNamespaceT | null;
    vector_of_referrables: (ReferrableT)[];
    single_weak_reference: bigint;
    vector_of_weak_references: (bigint)[];
    vector_of_strong_referrables: (ReferrableT)[];
    co_owning_reference: bigint;
    vector_of_co_owning_references: (bigint)[];
    non_owning_reference: bigint;
    vector_of_non_owning_references: (bigint)[];
    any_unique_type: AnyUniqueAliases;
    any_unique: MonsterT | MyGame_Example2_MonsterT | TestSimpleTableWithEnumT | null;
    any_ambiguous_type: AnyAmbiguousAliases;
    any_ambiguous: MonsterT | null;
    vector_of_enums: (Color)[];
    signed_enum: Race;
    testrequirednestedflatbuffer: (number)[];
    scalar_key_sorted_tables: (StatT)[];
    native_inline: TestT | null;
    long_enum_non_enum_default: bigint;
    long_enum_normal_default: bigint;
    nan_default: number;
    inf_default: number;
    positive_inf_default: number;
    infinity_default: number;
    positive_infinity_default: number;
    negative_inf_default: number;
    negative_infinity_default: number;
    double_inf_default: number;
    constructor(pos?: Vec3T | null, mana?: number, hp?: number, name?: string | Uint8Array | null, inventory?: (number)[], color?: Color, test_type?: Any, test?: MonsterT | MyGame_Example2_MonsterT | TestSimpleTableWithEnumT | null, test4?: (TestT)[], testarrayofstring?: (string)[], testarrayoftables?: (MonsterT)[], enemy?: MonsterT | null, testnestedflatbuffer?: (number)[], testempty?: StatT | null, testbool?: boolean, testhashs32_fnv1?: number, testhashu32_fnv1?: number, testhashs64_fnv1?: bigint, testhashu64_fnv1?: bigint, testhashs32_fnv1a?: number, testhashu32_fnv1a?: number, testhashs64_fnv1a?: bigint, testhashu64_fnv1a?: bigint, testarrayofbools?: (boolean)[], testf?: number, testf2?: number, testf3?: number, testarrayofstring2?: (string)[], testarrayofsortedstruct?: (AbilityT)[], flex?: (number)[], test5?: (TestT)[], vector_of_longs?: (bigint)[], vector_of_doubles?: (number)[], parent_namespace_test?: InParentNamespaceT | null, vector_of_referrables?: (ReferrableT)[], single_weak_reference?: bigint, vector_of_weak_references?: (bigint)[], vector_of_strong_referrables?: (ReferrableT)[], co_owning_reference?: bigint, vector_of_co_owning_references?: (bigint)[], non_owning_reference?: bigint, vector_of_non_owning_references?: (bigint)[], any_unique_type?: AnyUniqueAliases, any_unique?: MonsterT | MyGame_Example2_MonsterT | TestSimpleTableWithEnumT | null, any_ambiguous_type?: AnyAmbiguousAliases, any_ambiguous?: MonsterT | null, vector_of_enums?: (Color)[], signed_enum?: Race, testrequirednestedflatbuffer?: (number)[], scalar_key_sorted_tables?: (StatT)[], native_inline?: TestT | null, long_enum_non_enum_default?: bigint, long_enum_normal_default?: bigint, nan_default?: number, inf_default?: number, positive_inf_default?: number, infinity_default?: number, positive_infinity_default?: number, negative_inf_default?: number, negative_infinity_default?: number, double_inf_default?: number);
    pack(builder: flatbuffers.Builder): flatbuffers.Offset;
}
