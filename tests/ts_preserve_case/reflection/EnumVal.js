// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { KeyValue } from '../reflection/KeyValue.js';
import { Type } from '../reflection/Type.js';
export class EnumVal {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEnumVal(bb, obj) {
        return (obj || new EnumVal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEnumVal(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EnumVal()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    value() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_value(value) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt64(this.bb_pos + offset, value);
        return true;
    }
    union_type(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new Type()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    documentation(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    documentation_Length() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    attributes(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    attributes_Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static getFullyQualifiedName() {
        return 'reflection.EnumVal';
    }
    static startEnumVal(builder) {
        builder.startObject(6);
    }
    static add_name(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static add_value(builder, value) {
        builder.addFieldInt64(1, value, BigInt('0'));
    }
    static add_union_type(builder, union_typeOffset) {
        builder.addFieldOffset(3, union_typeOffset, 0);
    }
    static add_documentation(builder, documentationOffset) {
        builder.addFieldOffset(4, documentationOffset, 0);
    }
    static create_documentation_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_documentation_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_attributes(builder, attributesOffset) {
        builder.addFieldOffset(5, attributesOffset, 0);
    }
    static create_attributes_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_attributes_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endEnumVal(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // name
        return offset;
    }
    unpack() {
        return new EnumValT(this.name(), this.value(), (this.union_type() !== null ? this.union_type().unpack() : null), this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length()), this.bb.createObjList(this.attributes.bind(this), this.attributes_Length()));
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.value = this.value();
        _o.union_type = (this.union_type() !== null ? this.union_type().unpack() : null);
        _o.documentation = this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length());
        _o.attributes = this.bb.createObjList(this.attributes.bind(this), this.attributes_Length());
    }
}
export class EnumValT {
    constructor(name = null, value = BigInt('0'), union_type = null, documentation = [], attributes = []) {
        this.name = name;
        this.value = value;
        this.union_type = union_type;
        this.documentation = documentation;
        this.attributes = attributes;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const union_type = (this.union_type !== null ? this.union_type.pack(builder) : 0);
        const documentation = EnumVal.create_documentation_Vector(builder, builder.createObjectOffsetList(this.documentation));
        const attributes = EnumVal.create_attributes_Vector(builder, builder.createObjectOffsetList(this.attributes));
        EnumVal.startEnumVal(builder);
        EnumVal.add_name(builder, name);
        EnumVal.add_value(builder, this.value);
        EnumVal.add_union_type(builder, union_type);
        EnumVal.add_documentation(builder, documentation);
        EnumVal.add_attributes(builder, attributes);
        return EnumVal.endEnumVal(builder);
    }
}
