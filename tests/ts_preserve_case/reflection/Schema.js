// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Enum } from '../reflection/Enum.js';
import { Object_ } from '../reflection/Object.js';
import { SchemaFile } from '../reflection/SchemaFile.js';
import { Service } from '../reflection/Service.js';
export class Schema {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSchema(bb, obj) {
        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSchema(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Schema()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('BFBS');
    }
    objects(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Object_()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    objects_Length() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    enums(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Enum()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    enums_Length() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    file_ident(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    file_ext(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    root_table(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new Object_()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    services(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new Service()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    services_Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    advanced_features() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint64(this.bb_pos + offset) : BigInt('0');
    }
    mutate_advanced_features(value) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        if (offset === 0) {
            return false;
        }
        this.bb.writeUint64(this.bb_pos + offset, value);
        return true;
    }
    /**
     * All the files used in this compilation. Files are relative to where
     * flatc was invoked.
     */
    fbs_files(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? (obj || new SchemaFile()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    fbs_files_Length() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static getFullyQualifiedName() {
        return 'reflection.Schema';
    }
    static startSchema(builder) {
        builder.startObject(8);
    }
    static add_objects(builder, objectsOffset) {
        builder.addFieldOffset(0, objectsOffset, 0);
    }
    static create_objects_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_objects_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_enums(builder, enumsOffset) {
        builder.addFieldOffset(1, enumsOffset, 0);
    }
    static create_enums_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_enums_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_file_ident(builder, file_identOffset) {
        builder.addFieldOffset(2, file_identOffset, 0);
    }
    static add_file_ext(builder, file_extOffset) {
        builder.addFieldOffset(3, file_extOffset, 0);
    }
    static add_root_table(builder, root_tableOffset) {
        builder.addFieldOffset(4, root_tableOffset, 0);
    }
    static add_services(builder, servicesOffset) {
        builder.addFieldOffset(5, servicesOffset, 0);
    }
    static create_services_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_services_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_advanced_features(builder, advanced_features) {
        builder.addFieldInt64(6, advanced_features, BigInt('0'));
    }
    static add_fbs_files(builder, fbs_filesOffset) {
        builder.addFieldOffset(7, fbs_filesOffset, 0);
    }
    static create_fbs_files_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_fbs_files_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endSchema(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // objects
        builder.requiredField(offset, 6); // enums
        return offset;
    }
    static finishSchemaBuffer(builder, offset) {
        builder.finish(offset, 'BFBS');
    }
    static finishSizePrefixedSchemaBuffer(builder, offset) {
        builder.finish(offset, 'BFBS', true);
    }
    unpack() {
        return new SchemaT(this.bb.createObjList(this.objects.bind(this), this.objects_Length()), this.bb.createObjList(this.enums.bind(this), this.enums_Length()), this.file_ident(), this.file_ext(), (this.root_table() !== null ? this.root_table().unpack() : null), this.bb.createObjList(this.services.bind(this), this.services_Length()), this.advanced_features(), this.bb.createObjList(this.fbs_files.bind(this), this.fbs_files_Length()));
    }
    unpackTo(_o) {
        _o.objects = this.bb.createObjList(this.objects.bind(this), this.objects_Length());
        _o.enums = this.bb.createObjList(this.enums.bind(this), this.enums_Length());
        _o.file_ident = this.file_ident();
        _o.file_ext = this.file_ext();
        _o.root_table = (this.root_table() !== null ? this.root_table().unpack() : null);
        _o.services = this.bb.createObjList(this.services.bind(this), this.services_Length());
        _o.advanced_features = this.advanced_features();
        _o.fbs_files = this.bb.createObjList(this.fbs_files.bind(this), this.fbs_files_Length());
    }
}
export class SchemaT {
    constructor(objects = [], enums = [], file_ident = null, file_ext = null, root_table = null, services = [], advanced_features = BigInt('0'), fbs_files = []) {
        this.objects = objects;
        this.enums = enums;
        this.file_ident = file_ident;
        this.file_ext = file_ext;
        this.root_table = root_table;
        this.services = services;
        this.advanced_features = advanced_features;
        this.fbs_files = fbs_files;
    }
    pack(builder) {
        const objects = Schema.create_objects_Vector(builder, builder.createObjectOffsetList(this.objects));
        const enums = Schema.create_enums_Vector(builder, builder.createObjectOffsetList(this.enums));
        const file_ident = (this.file_ident !== null ? builder.createString(this.file_ident) : 0);
        const file_ext = (this.file_ext !== null ? builder.createString(this.file_ext) : 0);
        const root_table = (this.root_table !== null ? this.root_table.pack(builder) : 0);
        const services = Schema.create_services_Vector(builder, builder.createObjectOffsetList(this.services));
        const fbs_files = Schema.create_fbs_files_Vector(builder, builder.createObjectOffsetList(this.fbs_files));
        Schema.startSchema(builder);
        Schema.add_objects(builder, objects);
        Schema.add_enums(builder, enums);
        Schema.add_file_ident(builder, file_ident);
        Schema.add_file_ext(builder, file_ext);
        Schema.add_root_table(builder, root_table);
        Schema.add_services(builder, services);
        Schema.add_advanced_features(builder, this.advanced_features);
        Schema.add_fbs_files(builder, fbs_files);
        return Schema.endSchema(builder);
    }
}
