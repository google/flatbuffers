// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { Field } from '../reflection/Field.js';
import { KeyValue } from '../reflection/KeyValue.js';
export class Object_ {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsObject(bb, obj) {
        return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsObject(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Object_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    fields(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new Field()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    fields_Length() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    is_struct() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    mutate_is_struct(value) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt8(this.bb_pos + offset, +value);
        return true;
    }
    minalign() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_minalign(value) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    bytesize() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_bytesize(value) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    attributes(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    attributes_Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    documentation(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    documentation_Length() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    declaration_file(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static getFullyQualifiedName() {
        return 'reflection.Object';
    }
    static startObject(builder) {
        builder.startObject(8);
    }
    static add_name(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static add_fields(builder, fieldsOffset) {
        builder.addFieldOffset(1, fieldsOffset, 0);
    }
    static create_fields_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_fields_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_is_struct(builder, is_struct) {
        builder.addFieldInt8(2, +is_struct, +false);
    }
    static add_minalign(builder, minalign) {
        builder.addFieldInt32(3, minalign, 0);
    }
    static add_bytesize(builder, bytesize) {
        builder.addFieldInt32(4, bytesize, 0);
    }
    static add_attributes(builder, attributesOffset) {
        builder.addFieldOffset(5, attributesOffset, 0);
    }
    static create_attributes_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_attributes_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_documentation(builder, documentationOffset) {
        builder.addFieldOffset(6, documentationOffset, 0);
    }
    static create_documentation_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_documentation_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_declaration_file(builder, declaration_fileOffset) {
        builder.addFieldOffset(7, declaration_fileOffset, 0);
    }
    static endObject(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // name
        builder.requiredField(offset, 6); // fields
        return offset;
    }
    static createObject(builder, nameOffset, fieldsOffset, is_struct, minalign, bytesize, attributesOffset, documentationOffset, declaration_fileOffset) {
        Object_.startObject(builder);
        Object_.add_name(builder, nameOffset);
        Object_.add_fields(builder, fieldsOffset);
        Object_.add_is_struct(builder, is_struct);
        Object_.add_minalign(builder, minalign);
        Object_.add_bytesize(builder, bytesize);
        Object_.add_attributes(builder, attributesOffset);
        Object_.add_documentation(builder, documentationOffset);
        Object_.add_declaration_file(builder, declaration_fileOffset);
        return Object_.endObject(builder);
    }
    unpack() {
        return new Object_T(this.name(), this.bb.createObjList(this.fields.bind(this), this.fields_Length()), this.is_struct(), this.minalign(), this.bytesize(), this.bb.createObjList(this.attributes.bind(this), this.attributes_Length()), this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length()), this.declaration_file());
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.fields = this.bb.createObjList(this.fields.bind(this), this.fields_Length());
        _o.is_struct = this.is_struct();
        _o.minalign = this.minalign();
        _o.bytesize = this.bytesize();
        _o.attributes = this.bb.createObjList(this.attributes.bind(this), this.attributes_Length());
        _o.documentation = this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length());
        _o.declaration_file = this.declaration_file();
    }
}
export class Object_T {
    constructor(name = null, fields = [], is_struct = false, minalign = 0, bytesize = 0, attributes = [], documentation = [], declaration_file = null) {
        this.name = name;
        this.fields = fields;
        this.is_struct = is_struct;
        this.minalign = minalign;
        this.bytesize = bytesize;
        this.attributes = attributes;
        this.documentation = documentation;
        this.declaration_file = declaration_file;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const fields = Object_.create_fields_Vector(builder, builder.createObjectOffsetList(this.fields));
        const attributes = Object_.create_attributes_Vector(builder, builder.createObjectOffsetList(this.attributes));
        const documentation = Object_.create_documentation_Vector(builder, builder.createObjectOffsetList(this.documentation));
        const declaration_file = (this.declaration_file !== null ? builder.createString(this.declaration_file) : 0);
        return Object_.createObject(builder, name, fields, this.is_struct, this.minalign, this.bytesize, attributes, documentation, declaration_file);
    }
}
