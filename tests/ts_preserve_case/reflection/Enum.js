// automatically generated by the FlatBuffers compiler, do not modify
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
import * as flatbuffers from 'flatbuffers';
import { EnumVal } from '../reflection/EnumVal.js';
import { KeyValue } from '../reflection/KeyValue.js';
import { Type } from '../reflection/Type.js';
export class Enum {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEnum(bb, obj) {
        return (obj || new Enum()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEnum(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Enum()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    name(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    values(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new EnumVal()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    values_Length() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    is_union() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    mutate_is_union(value) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt8(this.bb_pos + offset, +value);
        return true;
    }
    underlying_type(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new Type()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    attributes(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    attributes_Length() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    documentation(index, optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    }
    documentation_Length() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    declaration_file(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static getFullyQualifiedName() {
        return 'reflection.Enum';
    }
    static startEnum(builder) {
        builder.startObject(7);
    }
    static add_name(builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    }
    static add_values(builder, valuesOffset) {
        builder.addFieldOffset(1, valuesOffset, 0);
    }
    static create_values_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_values_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_is_union(builder, is_union) {
        builder.addFieldInt8(2, +is_union, +false);
    }
    static add_underlying_type(builder, underlying_typeOffset) {
        builder.addFieldOffset(3, underlying_typeOffset, 0);
    }
    static add_attributes(builder, attributesOffset) {
        builder.addFieldOffset(4, attributesOffset, 0);
    }
    static create_attributes_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_attributes_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_documentation(builder, documentationOffset) {
        builder.addFieldOffset(5, documentationOffset, 0);
    }
    static create_documentation_Vector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static start_documentation_Vector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static add_declaration_file(builder, declaration_fileOffset) {
        builder.addFieldOffset(6, declaration_fileOffset, 0);
    }
    static endEnum(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 4); // name
        builder.requiredField(offset, 6); // values
        builder.requiredField(offset, 10); // underlying_type
        return offset;
    }
    unpack() {
        return new EnumT(this.name(), this.bb.createObjList(this.values.bind(this), this.values_Length()), this.is_union(), (this.underlying_type() !== null ? this.underlying_type().unpack() : null), this.bb.createObjList(this.attributes.bind(this), this.attributes_Length()), this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length()), this.declaration_file());
    }
    unpackTo(_o) {
        _o.name = this.name();
        _o.values = this.bb.createObjList(this.values.bind(this), this.values_Length());
        _o.is_union = this.is_union();
        _o.underlying_type = (this.underlying_type() !== null ? this.underlying_type().unpack() : null);
        _o.attributes = this.bb.createObjList(this.attributes.bind(this), this.attributes_Length());
        _o.documentation = this.bb.createScalarList(this.documentation.bind(this), this.documentation_Length());
        _o.declaration_file = this.declaration_file();
    }
}
export class EnumT {
    constructor(name = null, values = [], is_union = false, underlying_type = null, attributes = [], documentation = [], declaration_file = null) {
        this.name = name;
        this.values = values;
        this.is_union = is_union;
        this.underlying_type = underlying_type;
        this.attributes = attributes;
        this.documentation = documentation;
        this.declaration_file = declaration_file;
    }
    pack(builder) {
        const name = (this.name !== null ? builder.createString(this.name) : 0);
        const values = Enum.create_values_Vector(builder, builder.createObjectOffsetList(this.values));
        const underlying_type = (this.underlying_type !== null ? this.underlying_type.pack(builder) : 0);
        const attributes = Enum.create_attributes_Vector(builder, builder.createObjectOffsetList(this.attributes));
        const documentation = Enum.create_documentation_Vector(builder, builder.createObjectOffsetList(this.documentation));
        const declaration_file = (this.declaration_file !== null ? builder.createString(this.declaration_file) : 0);
        Enum.startEnum(builder);
        Enum.add_name(builder, name);
        Enum.add_values(builder, values);
        Enum.add_is_union(builder, this.is_union);
        Enum.add_underlying_type(builder, underlying_type);
        Enum.add_attributes(builder, attributes);
        Enum.add_documentation(builder, documentation);
        Enum.add_declaration_file(builder, declaration_file);
        return Enum.endEnum(builder);
    }
}
