// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum PlayerInputChangeOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerInputChange<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerInputChange<'a> {
  type Inner = PlayerInputChange<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerInputChange<'a> {

  pub const fn get_fully_qualified_name() -> &'static str {
    "RustNamerTest.PlayerInputChange"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerInputChange { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    _args: &'args PlayerInputChangeArgs
  ) -> flatbuffers::WIPOffset<PlayerInputChange<'bldr>> {
    let mut builder = PlayerInputChangeBuilder::new(_fbb);
    builder.finish()
  }

  pub fn unpack(&self) -> PlayerInputChangeT {
    PlayerInputChangeT {
    }
  }
}

impl flatbuffers::Verifiable for PlayerInputChange<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct PlayerInputChangeArgs {
}
impl<'a> Default for PlayerInputChangeArgs {
  #[inline]
  fn default() -> Self {
    PlayerInputChangeArgs {
    }
  }
}

pub struct PlayerInputChangeBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerInputChangeBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerInputChangeBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerInputChangeBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerInputChange<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerInputChange<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerInputChange");
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PlayerInputChangeT {
}
impl Default for PlayerInputChangeT {
  fn default() -> Self {
    Self {
    }
  }
}
impl PlayerInputChangeT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<PlayerInputChange<'b>> {
    PlayerInputChange::create(_fbb, &PlayerInputChangeArgs{
    })
  }
}
