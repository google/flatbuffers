// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Example

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TestSimpleTableWithEnumT struct {
	Color Color `json:"color"`
}

func (t *TestSimpleTableWithEnumT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	TestSimpleTableWithEnumStart(builder)
	TestSimpleTableWithEnumAddColor(builder, t.Color)
	return TestSimpleTableWithEnumEnd(builder)
}

func (rcv *TestSimpleTableWithEnum) UnPackTo(t *TestSimpleTableWithEnumT) {
	t.Color = rcv.Color()
}

func (rcv *TestSimpleTableWithEnum) UnPack() *TestSimpleTableWithEnumT {
	if rcv == nil {
		return nil
	}
	t := &TestSimpleTableWithEnumT{}
	rcv.UnPackTo(t)
	return t
}

type TestSimpleTableWithEnum struct {
	flatbuffers.Table
}

func GetRootAsTestSimpleTableWithEnum(buf []byte, offset flatbuffers.UOffsetT) (x TestSimpleTableWithEnum) {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset}
	return x
}

func FinishTestSimpleTableWithEnumBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsTestSimpleTableWithEnum(buf []byte, offset flatbuffers.UOffsetT) (x TestSimpleTableWithEnum) {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x.Table = flatbuffers.Table{Bytes: buf, Pos: n+offset+flatbuffers.SizeUint32}
	return x
}

func FinishSizePrefixedTestSimpleTableWithEnumBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *TestSimpleTableWithEnum) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv.Bytes = buf
	rcv.Pos = i
}

func (rcv *TestSimpleTableWithEnum) Color() Color {
	o := flatbuffers.UOffsetT(rcv.Offset(4))
	if o != 0 {
		return Color(rcv.GetByte(o + rcv.Pos))
	}
	return 2
}

func (rcv *TestSimpleTableWithEnum) MutateColor(n Color) bool {
	return rcv.MutateByteSlot(4, byte(n))
}

func TestSimpleTableWithEnumStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func TestSimpleTableWithEnumAddColor(builder *flatbuffers.Builder, color Color) {
	builder.PrependByteSlot(0, byte(color), 2)
}
func TestSimpleTableWithEnumEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
