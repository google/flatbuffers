<?php
// automatically generated by the FlatBuffers compiler, do not modify

declare(strict_types=1);

namespace MyGame\Example;

use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatbufferBuilder;

/// an example documentation comment: "monster object"
class Monster extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Monster
     */
    public static function getRootAsMonster(ByteBuffer $bb): Monster
    {
        $obj = new Monster();
        return $obj->init($bb->followUOffset($bb->getPosition()), $bb);
    }

    public static function MonsterIdentifier(): string
    {
        return "MONS";
    }

    public static function MonsterBufferHasIdentifier(ByteBuffer $buf): bool
    {
        return self::__has_identifier($buf, self::MonsterIdentifier());
    }

    public static function MonsterExtension(): string
    {
        return "mon";
    }

    /**
     * @param NPosT $_i offset
     * @param ByteBuffer $_bb
     * @return Monster
     **/
    public function init(int $_i, ByteBuffer $_bb): Monster
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return ?Vec3
     */
    public function getPos(): ?Vec3
    {
        $obj = new Vec3();
        $o = $this->__offset(4);
        return $o !== 0 ? $obj->init(Constants::asNPos($o + $this->bb_pos), $this->bb) : null;
    }

    /**
     * @return ShortT
     */
    public function getMana(): int
    {
        $o = $this->__offset(6);
        return $o !== 0 ? $this->bb->getShort(Constants::asNPos($o + $this->bb_pos)) : 150;
    }

    /**
     * @return ShortT
     */
    public function getHp(): int
    {
        $o = $this->__offset(8);
        return $o !== 0 ? $this->bb->getShort(Constants::asNPos($o + $this->bb_pos)) : 100;
    }

    public function getName(): ?string
    {
        $o = $this->__offset(10);
        return $o !== 0 ? $this->__string(Constants::asNPos($o + $this->bb_pos)) : null;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?ByteT
     */
    public function getInventory(int $j): ?int
    {
        $o = $this->__offset(14);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getInventoryLength(): int
    {
        $o = $this->__offset(14);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?string
     */
    public function getInventoryBytes(): ?string
    {
        return $this->__vector_as_bytes(14);
    }

    /**
     * @return ByteT
     */
    public function getColor(): int
    {
        $o = $this->__offset(16);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\Color::Blue;
    }

    /**
     * @return ByteT
     */
    public function getTestType(): int
    {
        $o = $this->__offset(18);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\Any::NONE;
    }

    /**
     * @template T of Table|Struct
     *
     * @param T $obj
     * @return ?T
     */
    public function getTest(Table|Struct $obj): ?object
    {
        $o = $this->__offset(20);
        return $o !== 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @param VOffsetT $j
     * @return ?Test
     */
    public function getTest4(int $j): ?Test
    {
        $o = $this->__offset(22);
        $obj = new Test();
        return $o !== 0 ? $obj->init(Constants::asNPos($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTest4Length(): int
    {
        $o = $this->__offset(22);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?StringT
     */
    public function getTestarrayofstring(int $j): ?string
    {
        $o = $this->__offset(24);
        return $o !== 0 ? $this->__string(Constants::asNPos($this->__vector($o) + $j * 4)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestarrayofstringLength(): int
    {
        $o = $this->__offset(24);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /// an example documentation comment: this will end up in the generated code
    /// multiline too
    /**
     * @param VOffsetT $j
     * @return ?Monster
     */
    public function getTestarrayoftables(int $j): ?Monster
    {
        $o = $this->__offset(26);
        $obj = new Monster();
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($this->__vector($o) + $j * 4)), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestarrayoftablesLength(): int
    {
        $o = $this->__offset(26);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?Monster
     */
    public function getEnemy(): ?Monster
    {
        $obj = new Monster();
        $o = $this->__offset(28);
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($o + $this->bb_pos)), $this->bb) : null;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?ByteT
     */
    public function getTestnestedflatbuffer(int $j): ?int
    {
        $o = $this->__offset(30);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestnestedflatbufferLength(): int
    {
        $o = $this->__offset(30);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?string
     */
    public function getTestnestedflatbufferBytes(): ?string
    {
        return $this->__vector_as_bytes(30);
    }

    /**
     * @return ?Stat
     */
    public function getTestempty(): ?Stat
    {
        $obj = new Stat();
        $o = $this->__offset(32);
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($o + $this->bb_pos)), $this->bb) : null;
    }

    /**
     * @return BoolT
     */
    public function getTestbool(): bool
    {
        $o = $this->__offset(34);
        return $o !== 0 ? $this->bb->getBool(Constants::asNPos($o + $this->bb_pos)) : false;
    }

    /**
     * @return IntT
     */
    public function getTesthashs32Fnv1(): int
    {
        $o = $this->__offset(36);
        return $o !== 0 ? $this->bb->getInt(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UintT
     */
    public function getTesthashu32Fnv1(): int
    {
        $o = $this->__offset(38);
        return $o !== 0 ? $this->bb->getUint(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return LongT
     */
    public function getTesthashs64Fnv1(): int
    {
        $o = $this->__offset(40);
        return $o !== 0 ? $this->bb->getLong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UlongT
     */
    public function getTesthashu64Fnv1(): int
    {
        $o = $this->__offset(42);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return IntT
     */
    public function getTesthashs32Fnv1a(): int
    {
        $o = $this->__offset(44);
        return $o !== 0 ? $this->bb->getInt(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UintT
     */
    public function getTesthashu32Fnv1a(): int
    {
        $o = $this->__offset(46);
        return $o !== 0 ? $this->bb->getUint(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return LongT
     */
    public function getTesthashs64Fnv1a(): int
    {
        $o = $this->__offset(48);
        return $o !== 0 ? $this->bb->getLong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UlongT
     */
    public function getTesthashu64Fnv1a(): int
    {
        $o = $this->__offset(50);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?BoolT
     */
    public function getTestarrayofbools(int $j): ?bool
    {
        $o = $this->__offset(52);
        return $o !== 0 ? $this->bb->getBool(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestarrayofboolsLength(): int
    {
        $o = $this->__offset(52);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return FloatT
     */
    public function getTestf(): float
    {
        $o = $this->__offset(54);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : 3.14159;
    }

    /**
     * @return FloatT
     */
    public function getTestf2(): float
    {
        $o = $this->__offset(56);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : 3.0;
    }

    /**
     * @return FloatT
     */
    public function getTestf3(): float
    {
        $o = $this->__offset(58);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : 0.0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?StringT
     */
    public function getTestarrayofstring2(int $j): ?string
    {
        $o = $this->__offset(60);
        return $o !== 0 ? $this->__string(Constants::asNPos($this->__vector($o) + $j * 4)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestarrayofstring2Length(): int
    {
        $o = $this->__offset(60);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param VOffsetT $j
     * @return ?Ability
     */
    public function getTestarrayofsortedstruct(int $j): ?Ability
    {
        $o = $this->__offset(62);
        $obj = new Ability();
        return $o !== 0 ? $obj->init(Constants::asNPos($this->__vector($o) + $j * 8), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestarrayofsortedstructLength(): int
    {
        $o = $this->__offset(62);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?ByteT
     */
    public function getFlex(int $j): ?int
    {
        $o = $this->__offset(64);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getFlexLength(): int
    {
        $o = $this->__offset(64);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?string
     */
    public function getFlexBytes(): ?string
    {
        return $this->__vector_as_bytes(64);
    }

    /**
     * @param VOffsetT $j
     * @return ?Test
     */
    public function getTest5(int $j): ?Test
    {
        $o = $this->__offset(66);
        $obj = new Test();
        return $o !== 0 ? $obj->init(Constants::asNPos($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTest5Length(): int
    {
        $o = $this->__offset(66);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?LongT
     */
    public function getVectorOfLongs(int $j): ?int
    {
        $o = $this->__offset(68);
        return $o !== 0 ? $this->bb->getLong(Constants::asNPos($this->__vector($o) + $j * 8)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfLongsLength(): int
    {
        $o = $this->__offset(68);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?DoubleT
     */
    public function getVectorOfDoubles(int $j): ?float
    {
        $o = $this->__offset(70);
        return $o !== 0 ? $this->bb->getDouble(Constants::asNPos($this->__vector($o) + $j * 8)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfDoublesLength(): int
    {
        $o = $this->__offset(70);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?InParentNamespace
     */
    public function getParentNamespaceTest(): ?InParentNamespace
    {
        $obj = new InParentNamespace();
        $o = $this->__offset(72);
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($o + $this->bb_pos)), $this->bb) : null;
    }

    /**
     * @param VOffsetT $j
     * @return ?Referrable
     */
    public function getVectorOfReferrables(int $j): ?Referrable
    {
        $o = $this->__offset(74);
        $obj = new Referrable();
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($this->__vector($o) + $j * 4)), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfReferrablesLength(): int
    {
        $o = $this->__offset(74);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return UlongT
     */
    public function getSingleWeakReference(): int
    {
        $o = $this->__offset(76);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?UlongT
     */
    public function getVectorOfWeakReferences(int $j): ?int
    {
        $o = $this->__offset(78);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($this->__vector($o) + $j * 8)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfWeakReferencesLength(): int
    {
        $o = $this->__offset(78);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param VOffsetT $j
     * @return ?Referrable
     */
    public function getVectorOfStrongReferrables(int $j): ?Referrable
    {
        $o = $this->__offset(80);
        $obj = new Referrable();
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($this->__vector($o) + $j * 4)), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfStrongReferrablesLength(): int
    {
        $o = $this->__offset(80);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return UlongT
     */
    public function getCoOwningReference(): int
    {
        $o = $this->__offset(82);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?UlongT
     */
    public function getVectorOfCoOwningReferences(int $j): ?int
    {
        $o = $this->__offset(84);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($this->__vector($o) + $j * 8)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfCoOwningReferencesLength(): int
    {
        $o = $this->__offset(84);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return UlongT
     */
    public function getNonOwningReference(): int
    {
        $o = $this->__offset(86);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?UlongT
     */
    public function getVectorOfNonOwningReferences(int $j): ?int
    {
        $o = $this->__offset(88);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($this->__vector($o) + $j * 8)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfNonOwningReferencesLength(): int
    {
        $o = $this->__offset(88);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ByteT
     */
    public function getAnyUniqueType(): int
    {
        $o = $this->__offset(90);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\AnyUniqueAliases::NONE;
    }

    /**
     * @template T of Table|Struct
     *
     * @param T $obj
     * @return ?T
     */
    public function getAnyUnique(Table|Struct $obj): ?object
    {
        $o = $this->__offset(92);
        return $o !== 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @return ByteT
     */
    public function getAnyAmbiguousType(): int
    {
        $o = $this->__offset(94);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\AnyAmbiguousAliases::NONE;
    }

    /**
     * @template T of Table|Struct
     *
     * @param T $obj
     * @return ?T
     */
    public function getAnyAmbiguous(Table|Struct $obj): ?object
    {
        $o = $this->__offset(96);
        return $o !== 0 ? $this->__union($obj, $o) : null;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?ByteT
     */
    public function getVectorOfEnums(int $j): ?int
    {
        $o = $this->__offset(98);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getVectorOfEnumsLength(): int
    {
        $o = $this->__offset(98);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?string
     */
    public function getVectorOfEnumsBytes(): ?string
    {
        return $this->__vector_as_bytes(98);
    }

    /**
     * @return SbyteT
     */
    public function getSignedEnum(): int
    {
        $o = $this->__offset(100);
        return $o !== 0 ? $this->bb->getSbyte(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\Race::None;
    }

    /**
     * @param UOffsetT $j offset
     * @return ?ByteT
     */
    public function getTestrequirednestedflatbuffer(int $j): ?int
    {
        $o = $this->__offset(102);
        return $o !== 0 ? $this->bb->getByte(Constants::asNPos($this->__vector($o) + $j * 1)) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getTestrequirednestedflatbufferLength(): int
    {
        $o = $this->__offset(102);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?string
     */
    public function getTestrequirednestedflatbufferBytes(): ?string
    {
        return $this->__vector_as_bytes(102);
    }

    /**
     * @param VOffsetT $j
     * @return ?Stat
     */
    public function getScalarKeySortedTables(int $j): ?Stat
    {
        $o = $this->__offset(104);
        $obj = new Stat();
        return $o !== 0 ? $obj->init($this->__indirect(Constants::asNPos($this->__vector($o) + $j * 4)), $this->bb) : null;
    }

    /**
     * @return UOffsetT
     */
    public function getScalarKeySortedTablesLength(): int
    {
        $o = $this->__offset(104);
        return $o !== 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return ?Test
     */
    public function getNativeInline(): ?Test
    {
        $obj = new Test();
        $o = $this->__offset(106);
        return $o !== 0 ? $obj->init(Constants::asNPos($o + $this->bb_pos), $this->bb) : null;
    }

    /**
     * @return UlongT
     */
    public function getLongEnumNonEnumDefault(): int
    {
        $o = $this->__offset(108);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : 0;
    }

    /**
     * @return UlongT
     */
    public function getLongEnumNormalDefault(): int
    {
        $o = $this->__offset(110);
        return $o !== 0 ? $this->bb->getUlong(Constants::asNPos($o + $this->bb_pos)) : \MyGame\Example\LongEnum::LongOne;
    }

    /**
     * @return FloatT
     */
    public function getNanDefault(): float
    {
        $o = $this->__offset(112);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : nan;
    }

    /**
     * @return FloatT
     */
    public function getInfDefault(): float
    {
        $o = $this->__offset(114);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : inf;
    }

    /**
     * @return FloatT
     */
    public function getPositiveInfDefault(): float
    {
        $o = $this->__offset(116);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : +inf;
    }

    /**
     * @return FloatT
     */
    public function getInfinityDefault(): float
    {
        $o = $this->__offset(118);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : infinity;
    }

    /**
     * @return FloatT
     */
    public function getPositiveInfinityDefault(): float
    {
        $o = $this->__offset(120);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : +infinity;
    }

    /**
     * @return FloatT
     */
    public function getNegativeInfDefault(): float
    {
        $o = $this->__offset(122);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : -inf;
    }

    /**
     * @return FloatT
     */
    public function getNegativeInfinityDefault(): float
    {
        $o = $this->__offset(124);
        return $o !== 0 ? $this->bb->getFloat(Constants::asNPos($o + $this->bb_pos)) : -infinity;
    }

    /**
     * @return DoubleT
     */
    public function getDoubleInfDefault(): float
    {
        $o = $this->__offset(126);
        return $o !== 0 ? $this->bb->getDouble(Constants::asNPos($o + $this->bb_pos)) : inf;
    }

    /**
     * @param FlatbufferBuilder $builder
     */
    public static function startMonster(FlatbufferBuilder $builder): void
    {
        $builder->StartObject(62);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $pos
     * @param ShortT $mana
     * @param ShortT $hp
     * @param WPosT $name
     * @param WPosT $inventory
     * @param ByteT $color
     * @param ByteT $test_type
     * @param WPosT $test
     * @param WPosT $test4
     * @param WPosT $testarrayofstring
     * @param WPosT $testarrayoftables
     * @param WPosT $enemy
     * @param WPosT $testnestedflatbuffer
     * @param WPosT $testempty
     * @param BoolT $testbool
     * @param IntT $testhashs32_fnv1
     * @param UintT $testhashu32_fnv1
     * @param LongT $testhashs64_fnv1
     * @param UlongT $testhashu64_fnv1
     * @param IntT $testhashs32_fnv1a
     * @param UintT $testhashu32_fnv1a
     * @param LongT $testhashs64_fnv1a
     * @param UlongT $testhashu64_fnv1a
     * @param WPosT $testarrayofbools
     * @param FloatT $testf
     * @param FloatT $testf2
     * @param FloatT $testf3
     * @param WPosT $testarrayofstring2
     * @param WPosT $testarrayofsortedstruct
     * @param WPosT $flex
     * @param WPosT $test5
     * @param WPosT $vector_of_longs
     * @param WPosT $vector_of_doubles
     * @param WPosT $parent_namespace_test
     * @param WPosT $vector_of_referrables
     * @param UlongT $single_weak_reference
     * @param WPosT $vector_of_weak_references
     * @param WPosT $vector_of_strong_referrables
     * @param UlongT $co_owning_reference
     * @param WPosT $vector_of_co_owning_references
     * @param UlongT $non_owning_reference
     * @param WPosT $vector_of_non_owning_references
     * @param ByteT $any_unique_type
     * @param WPosT $any_unique
     * @param ByteT $any_ambiguous_type
     * @param WPosT $any_ambiguous
     * @param WPosT $vector_of_enums
     * @param SbyteT $signed_enum
     * @param WPosT $testrequirednestedflatbuffer
     * @param WPosT $scalar_key_sorted_tables
     * @param WPosT $native_inline
     * @param UlongT $long_enum_non_enum_default
     * @param UlongT $long_enum_normal_default
     * @param FloatT $nan_default
     * @param FloatT $inf_default
     * @param FloatT $positive_inf_default
     * @param FloatT $infinity_default
     * @param FloatT $positive_infinity_default
     * @param FloatT $negative_inf_default
     * @param FloatT $negative_infinity_default
     * @param DoubleT $double_inf_default
     * @return WPosT
     */
    public static function createMonster(FlatbufferBuilder $builder, int $pos, int $mana, int $hp, int $name, int $inventory, int $color, int $test_type, int $test, int $test4, int $testarrayofstring, int $testarrayoftables, int $enemy, int $testnestedflatbuffer, int $testempty, bool $testbool, int $testhashs32_fnv1, int $testhashu32_fnv1, int $testhashs64_fnv1, int $testhashu64_fnv1, int $testhashs32_fnv1a, int $testhashu32_fnv1a, int $testhashs64_fnv1a, int $testhashu64_fnv1a, int $testarrayofbools, float $testf, float $testf2, float $testf3, int $testarrayofstring2, int $testarrayofsortedstruct, int $flex, int $test5, int $vector_of_longs, int $vector_of_doubles, int $parent_namespace_test, int $vector_of_referrables, int $single_weak_reference, int $vector_of_weak_references, int $vector_of_strong_referrables, int $co_owning_reference, int $vector_of_co_owning_references, int $non_owning_reference, int $vector_of_non_owning_references, int $any_unique_type, int $any_unique, int $any_ambiguous_type, int $any_ambiguous, int $vector_of_enums, int $signed_enum, int $testrequirednestedflatbuffer, int $scalar_key_sorted_tables, int $native_inline, int $long_enum_non_enum_default, int $long_enum_normal_default, float $nan_default, float $inf_default, float $positive_inf_default, float $infinity_default, float $positive_infinity_default, float $negative_inf_default, float $negative_infinity_default, float $double_inf_default): int
    {
        $builder->startObject(62);
        self::addPos($builder, $pos);
        self::addMana($builder, $mana);
        self::addHp($builder, $hp);
        self::addName($builder, $name);
        self::addInventory($builder, $inventory);
        self::addColor($builder, $color);
        self::addTestType($builder, $test_type);
        self::addTest($builder, $test);
        self::addTest4($builder, $test4);
        self::addTestarrayofstring($builder, $testarrayofstring);
        self::addTestarrayoftables($builder, $testarrayoftables);
        self::addEnemy($builder, $enemy);
        self::addTestnestedflatbuffer($builder, $testnestedflatbuffer);
        self::addTestempty($builder, $testempty);
        self::addTestbool($builder, $testbool);
        self::addTesthashs32Fnv1($builder, $testhashs32_fnv1);
        self::addTesthashu32Fnv1($builder, $testhashu32_fnv1);
        self::addTesthashs64Fnv1($builder, $testhashs64_fnv1);
        self::addTesthashu64Fnv1($builder, $testhashu64_fnv1);
        self::addTesthashs32Fnv1a($builder, $testhashs32_fnv1a);
        self::addTesthashu32Fnv1a($builder, $testhashu32_fnv1a);
        self::addTesthashs64Fnv1a($builder, $testhashs64_fnv1a);
        self::addTesthashu64Fnv1a($builder, $testhashu64_fnv1a);
        self::addTestarrayofbools($builder, $testarrayofbools);
        self::addTestf($builder, $testf);
        self::addTestf2($builder, $testf2);
        self::addTestf3($builder, $testf3);
        self::addTestarrayofstring2($builder, $testarrayofstring2);
        self::addTestarrayofsortedstruct($builder, $testarrayofsortedstruct);
        self::addFlex($builder, $flex);
        self::addTest5($builder, $test5);
        self::addVectorOfLongs($builder, $vector_of_longs);
        self::addVectorOfDoubles($builder, $vector_of_doubles);
        self::addParentNamespaceTest($builder, $parent_namespace_test);
        self::addVectorOfReferrables($builder, $vector_of_referrables);
        self::addSingleWeakReference($builder, $single_weak_reference);
        self::addVectorOfWeakReferences($builder, $vector_of_weak_references);
        self::addVectorOfStrongReferrables($builder, $vector_of_strong_referrables);
        self::addCoOwningReference($builder, $co_owning_reference);
        self::addVectorOfCoOwningReferences($builder, $vector_of_co_owning_references);
        self::addNonOwningReference($builder, $non_owning_reference);
        self::addVectorOfNonOwningReferences($builder, $vector_of_non_owning_references);
        self::addAnyUniqueType($builder, $any_unique_type);
        self::addAnyUnique($builder, $any_unique);
        self::addAnyAmbiguousType($builder, $any_ambiguous_type);
        self::addAnyAmbiguous($builder, $any_ambiguous);
        self::addVectorOfEnums($builder, $vector_of_enums);
        self::addSignedEnum($builder, $signed_enum);
        self::addTestrequirednestedflatbuffer($builder, $testrequirednestedflatbuffer);
        self::addScalarKeySortedTables($builder, $scalar_key_sorted_tables);
        self::addNativeInline($builder, $native_inline);
        self::addLongEnumNonEnumDefault($builder, $long_enum_non_enum_default);
        self::addLongEnumNormalDefault($builder, $long_enum_normal_default);
        self::addNanDefault($builder, $nan_default);
        self::addInfDefault($builder, $inf_default);
        self::addPositiveInfDefault($builder, $positive_inf_default);
        self::addInfinityDefault($builder, $infinity_default);
        self::addPositiveInfinityDefault($builder, $positive_infinity_default);
        self::addNegativeInfDefault($builder, $negative_inf_default);
        self::addNegativeInfinityDefault($builder, $negative_infinity_default);
        self::addDoubleInfDefault($builder, $double_inf_default);
        $o = $builder->endObject();
        $builder->required($o, 10);  // name
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $pos
     */
    public static function addPos(FlatbufferBuilder $builder, int $pos): void
    {
        $builder->addStructX(0, $pos, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ShortT $mana
     */
    public static function addMana(FlatbufferBuilder $builder, int $mana): void
    {
        $builder->addShortX(1, $mana, 150);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ShortT $hp
     */
    public static function addHp(FlatbufferBuilder $builder, int $hp): void
    {
        $builder->addShortX(2, $hp, 100);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $name
     */
    public static function addName(FlatbufferBuilder $builder, int $name): void
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $inventory
     */
    public static function addInventory(FlatbufferBuilder $builder, int $inventory): void
    {
        $builder->addOffsetX(5, $inventory, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<ByteT> $data data
     * @return WPosT vector offset
     */
    public static function createInventoryVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startInventoryVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createInventoryVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $color
     */
    public static function addColor(FlatbufferBuilder $builder, int $color): void
    {
        $builder->addByteX(6, $color, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $testType
     */
    public static function addTestType(FlatbufferBuilder $builder, int $testType): void
    {
        $builder->addByteX(7, $testType, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $offset
     */
    public static function addTest(FlatbufferBuilder $builder, int $offset): void
    {
        $builder->addOffsetX(8, $offset, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $test4
     */
    public static function addTest4(FlatbufferBuilder $builder, int $test4): void
    {
        $builder->addOffsetX(9, $test4, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTest4Vector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 2);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTest4Vector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 2);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testarrayofstring
     */
    public static function addTestarrayofstring(FlatbufferBuilder $builder, int $testarrayofstring): void
    {
        $builder->addOffsetX(10, $testarrayofstring, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTestarrayofstringVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestarrayofstringVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testarrayoftables
     */
    public static function addTestarrayoftables(FlatbufferBuilder $builder, int $testarrayoftables): void
    {
        $builder->addOffsetX(11, $testarrayoftables, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTestarrayoftablesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestarrayoftablesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $enemy
     */
    public static function addEnemy(FlatbufferBuilder $builder, int $enemy): void
    {
        $builder->addOffsetX(12, $enemy, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testnestedflatbuffer
     */
    public static function addTestnestedflatbuffer(FlatbufferBuilder $builder, int $testnestedflatbuffer): void
    {
        $builder->addOffsetX(13, $testnestedflatbuffer, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<ByteT> $data data
     * @return WPosT vector offset
     */
    public static function createTestnestedflatbufferVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestnestedflatbufferVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createTestnestedflatbufferVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testempty
     */
    public static function addTestempty(FlatbufferBuilder $builder, int $testempty): void
    {
        $builder->addOffsetX(14, $testempty, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param BoolT $testbool
     */
    public static function addTestbool(FlatbufferBuilder $builder, bool $testbool): void
    {
        $builder->addBoolX(15, $testbool, false);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param IntT $testhashs32Fnv1
     */
    public static function addTesthashs32Fnv1(FlatbufferBuilder $builder, int $testhashs32Fnv1): void
    {
        $builder->addIntX(16, $testhashs32Fnv1, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UintT $testhashu32Fnv1
     */
    public static function addTesthashu32Fnv1(FlatbufferBuilder $builder, int $testhashu32Fnv1): void
    {
        $builder->addUintX(17, $testhashu32Fnv1, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param LongT $testhashs64Fnv1
     */
    public static function addTesthashs64Fnv1(FlatbufferBuilder $builder, int $testhashs64Fnv1): void
    {
        $builder->addLongX(18, $testhashs64Fnv1, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $testhashu64Fnv1
     */
    public static function addTesthashu64Fnv1(FlatbufferBuilder $builder, int $testhashu64Fnv1): void
    {
        $builder->addUlongX(19, $testhashu64Fnv1, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param IntT $testhashs32Fnv1a
     */
    public static function addTesthashs32Fnv1a(FlatbufferBuilder $builder, int $testhashs32Fnv1a): void
    {
        $builder->addIntX(20, $testhashs32Fnv1a, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UintT $testhashu32Fnv1a
     */
    public static function addTesthashu32Fnv1a(FlatbufferBuilder $builder, int $testhashu32Fnv1a): void
    {
        $builder->addUintX(21, $testhashu32Fnv1a, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param LongT $testhashs64Fnv1a
     */
    public static function addTesthashs64Fnv1a(FlatbufferBuilder $builder, int $testhashs64Fnv1a): void
    {
        $builder->addLongX(22, $testhashs64Fnv1a, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $testhashu64Fnv1a
     */
    public static function addTesthashu64Fnv1a(FlatbufferBuilder $builder, int $testhashu64Fnv1a): void
    {
        $builder->addUlongX(23, $testhashu64Fnv1a, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testarrayofbools
     */
    public static function addTestarrayofbools(FlatbufferBuilder $builder, int $testarrayofbools): void
    {
        $builder->addOffsetX(24, $testarrayofbools, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<BoolT> $data data
     * @return WPosT vector offset
     */
    public static function createTestarrayofboolsVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putBool($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestarrayofboolsVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createTestarrayofboolsVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $testf
     */
    public static function addTestf(FlatbufferBuilder $builder, float $testf): void
    {
        $builder->addFloatX(25, $testf, 3.14159);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $testf2
     */
    public static function addTestf2(FlatbufferBuilder $builder, float $testf2): void
    {
        $builder->addFloatX(26, $testf2, 3.0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $testf3
     */
    public static function addTestf3(FlatbufferBuilder $builder, float $testf3): void
    {
        $builder->addFloatX(27, $testf3, 0.0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testarrayofstring2
     */
    public static function addTestarrayofstring2(FlatbufferBuilder $builder, int $testarrayofstring2): void
    {
        $builder->addOffsetX(28, $testarrayofstring2, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTestarrayofstring2Vector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestarrayofstring2Vector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testarrayofsortedstruct
     */
    public static function addTestarrayofsortedstruct(FlatbufferBuilder $builder, int $testarrayofsortedstruct): void
    {
        $builder->addOffsetX(29, $testarrayofsortedstruct, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTestarrayofsortedstructVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestarrayofsortedstructVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $flex
     */
    public static function addFlex(FlatbufferBuilder $builder, int $flex): void
    {
        $builder->addOffsetX(30, $flex, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<ByteT> $data data
     * @return WPosT vector offset
     */
    public static function createFlexVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startFlexVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createFlexVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $test5
     */
    public static function addTest5(FlatbufferBuilder $builder, int $test5): void
    {
        $builder->addOffsetX(31, $test5, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createTest5Vector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 2);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTest5Vector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 2);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfLongs
     */
    public static function addVectorOfLongs(FlatbufferBuilder $builder, int $vectorOfLongs): void
    {
        $builder->addOffsetX(32, $vectorOfLongs, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<LongT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfLongsVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putLong($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfLongsVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfDoubles
     */
    public static function addVectorOfDoubles(FlatbufferBuilder $builder, int $vectorOfDoubles): void
    {
        $builder->addOffsetX(33, $vectorOfDoubles, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<DoubleT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfDoublesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putDouble($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfDoublesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $parentNamespaceTest
     */
    public static function addParentNamespaceTest(FlatbufferBuilder $builder, int $parentNamespaceTest): void
    {
        $builder->addOffsetX(34, $parentNamespaceTest, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfReferrables
     */
    public static function addVectorOfReferrables(FlatbufferBuilder $builder, int $vectorOfReferrables): void
    {
        $builder->addOffsetX(35, $vectorOfReferrables, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfReferrablesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfReferrablesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $singleWeakReference
     */
    public static function addSingleWeakReference(FlatbufferBuilder $builder, int $singleWeakReference): void
    {
        $builder->addUlongX(36, $singleWeakReference, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfWeakReferences
     */
    public static function addVectorOfWeakReferences(FlatbufferBuilder $builder, int $vectorOfWeakReferences): void
    {
        $builder->addOffsetX(37, $vectorOfWeakReferences, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<UlongT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfWeakReferencesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putUlong($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfWeakReferencesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfStrongReferrables
     */
    public static function addVectorOfStrongReferrables(FlatbufferBuilder $builder, int $vectorOfStrongReferrables): void
    {
        $builder->addOffsetX(38, $vectorOfStrongReferrables, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfStrongReferrablesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfStrongReferrablesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $coOwningReference
     */
    public static function addCoOwningReference(FlatbufferBuilder $builder, int $coOwningReference): void
    {
        $builder->addUlongX(39, $coOwningReference, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfCoOwningReferences
     */
    public static function addVectorOfCoOwningReferences(FlatbufferBuilder $builder, int $vectorOfCoOwningReferences): void
    {
        $builder->addOffsetX(40, $vectorOfCoOwningReferences, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<UlongT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfCoOwningReferencesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putUlong($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfCoOwningReferencesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $nonOwningReference
     */
    public static function addNonOwningReference(FlatbufferBuilder $builder, int $nonOwningReference): void
    {
        $builder->addUlongX(41, $nonOwningReference, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfNonOwningReferences
     */
    public static function addVectorOfNonOwningReferences(FlatbufferBuilder $builder, int $vectorOfNonOwningReferences): void
    {
        $builder->addOffsetX(42, $vectorOfNonOwningReferences, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<UlongT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfNonOwningReferencesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(8, Constants::asUOffset(count($data)), 8);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putUlong($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfNonOwningReferencesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(8, $numElems, 8);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $anyUniqueType
     */
    public static function addAnyUniqueType(FlatbufferBuilder $builder, int $anyUniqueType): void
    {
        $builder->addByteX(43, $anyUniqueType, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $offset
     */
    public static function addAnyUnique(FlatbufferBuilder $builder, int $offset): void
    {
        $builder->addOffsetX(44, $offset, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param ByteT $anyAmbiguousType
     */
    public static function addAnyAmbiguousType(FlatbufferBuilder $builder, int $anyAmbiguousType): void
    {
        $builder->addByteX(45, $anyAmbiguousType, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $offset
     */
    public static function addAnyAmbiguous(FlatbufferBuilder $builder, int $offset): void
    {
        $builder->addOffsetX(46, $offset, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $vectorOfEnums
     */
    public static function addVectorOfEnums(FlatbufferBuilder $builder, int $vectorOfEnums): void
    {
        $builder->addOffsetX(47, $vectorOfEnums, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<ByteT> $data data
     * @return WPosT vector offset
     */
    public static function createVectorOfEnumsVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startVectorOfEnumsVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createVectorOfEnumsVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param SbyteT $signedEnum
     */
    public static function addSignedEnum(FlatbufferBuilder $builder, int $signedEnum): void
    {
        $builder->addSbyteX(48, $signedEnum, -1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $testrequirednestedflatbuffer
     */
    public static function addTestrequirednestedflatbuffer(FlatbufferBuilder $builder, int $testrequirednestedflatbuffer): void
    {
        $builder->addOffsetX(49, $testrequirednestedflatbuffer, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<ByteT> $data data
     * @return WPosT vector offset
     */
    public static function createTestrequirednestedflatbufferVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(1, Constants::asUOffset(count($data)), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putByte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startTestrequirednestedflatbufferVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param string $data byte string
     * @return WPosT vector offset
     */
    public static function createTestrequirednestedflatbufferVectorFromString(FlatbufferBuilder $builder, string $data): int
    {
        return $builder->createByteString($data);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $scalarKeySortedTables
     */
    public static function addScalarKeySortedTables(FlatbufferBuilder $builder, int $scalarKeySortedTables): void
    {
        $builder->addOffsetX(50, $scalarKeySortedTables, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param list<WPosT> $data data
     * @return WPosT vector offset
     */
    public static function createScalarKeySortedTablesVector(FlatbufferBuilder $builder, array $data): int
    {
        $builder->startVector(4, Constants::asUOffset(count($data)), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UOffsetT $numElems
     */
    public static function startScalarKeySortedTablesVector(FlatbufferBuilder $builder, int $numElems): void
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $nativeInline
     */
    public static function addNativeInline(FlatbufferBuilder $builder, int $nativeInline): void
    {
        $builder->addStructX(51, $nativeInline, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $longEnumNonEnumDefault
     */
    public static function addLongEnumNonEnumDefault(FlatbufferBuilder $builder, int $longEnumNonEnumDefault): void
    {
        $builder->addUlongX(52, $longEnumNonEnumDefault, 0);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param UlongT $longEnumNormalDefault
     */
    public static function addLongEnumNormalDefault(FlatbufferBuilder $builder, int $longEnumNormalDefault): void
    {
        $builder->addUlongX(53, $longEnumNormalDefault, 2);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $nanDefault
     */
    public static function addNanDefault(FlatbufferBuilder $builder, float $nanDefault): void
    {
        $builder->addFloatX(54, $nanDefault, nan);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $infDefault
     */
    public static function addInfDefault(FlatbufferBuilder $builder, float $infDefault): void
    {
        $builder->addFloatX(55, $infDefault, inf);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $positiveInfDefault
     */
    public static function addPositiveInfDefault(FlatbufferBuilder $builder, float $positiveInfDefault): void
    {
        $builder->addFloatX(56, $positiveInfDefault, +inf);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $infinityDefault
     */
    public static function addInfinityDefault(FlatbufferBuilder $builder, float $infinityDefault): void
    {
        $builder->addFloatX(57, $infinityDefault, infinity);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $positiveInfinityDefault
     */
    public static function addPositiveInfinityDefault(FlatbufferBuilder $builder, float $positiveInfinityDefault): void
    {
        $builder->addFloatX(58, $positiveInfinityDefault, +infinity);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $negativeInfDefault
     */
    public static function addNegativeInfDefault(FlatbufferBuilder $builder, float $negativeInfDefault): void
    {
        $builder->addFloatX(59, $negativeInfDefault, -inf);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param FloatT $negativeInfinityDefault
     */
    public static function addNegativeInfinityDefault(FlatbufferBuilder $builder, float $negativeInfinityDefault): void
    {
        $builder->addFloatX(60, $negativeInfinityDefault, -infinity);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param DoubleT $doubleInfDefault
     */
    public static function addDoubleInfDefault(FlatbufferBuilder $builder, float $doubleInfDefault): void
    {
        $builder->addDoubleX(61, $doubleInfDefault, inf);
    }

    /**
     * @param FlatbufferBuilder $builder
     * @return WPosT table offset
     */
    public static function endMonster(FlatbufferBuilder $builder): int
    {
        $o = $builder->endObject();
        $builder->required($o, 10);  // name
        return $o;
    }

    /**
     * @param FlatbufferBuilder $builder
     * @param WPosT $offset
     */
    public static function finishMonsterBuffer(FlatbufferBuilder $builder, int $offset): void
    {
        $builder->finish($offset, "MONS");
    }
}
