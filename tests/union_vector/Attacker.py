# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Attacker(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Attacker()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAttacker(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def AttackerBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x56\x49", size_prefixed=size_prefixed)

    # Attacker
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Attacker
    def SwordAttackDamage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def AttackerStart(builder): builder.StartObject(1)
def Start(builder):
    return AttackerStart(builder)
def AttackerAddSwordAttackDamage(builder, swordAttackDamage): builder.PrependInt32Slot(0, swordAttackDamage, 0)
def AddSwordAttackDamage(builder, swordAttackDamage):
    return AttackerAddSwordAttackDamage(builder, swordAttackDamage)
def AttackerEnd(builder): return builder.EndObject()
def End(builder):
    return AttackerEnd(builder)

class AttackerT(object):

    # AttackerT
    def __init__(self):
        self.swordAttackDamage = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        attacker = Attacker()
        attacker.Init(buf, pos)
        return cls.InitFromObj(attacker)

    @classmethod
    def InitFromObj(cls, attacker):
        x = AttackerT()
        x._UnPack(attacker)
        return x

    # AttackerT
    def _UnPack(self, attacker):
        if attacker is None:
            return
        self.swordAttackDamage = attacker.SwordAttackDamage()

    # AttackerT
    def Pack(self, builder):
        AttackerStart(builder)
        AttackerAddSwordAttackDamage(builder, self.swordAttackDamage)
        attacker = AttackerEnd(builder)
        return attacker
