# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class HandFan(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HandFan()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsHandFan(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def HandFanBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x56\x49", size_prefixed=size_prefixed)

    # HandFan
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HandFan
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HandFanStart(builder): builder.StartObject(1)
def Start(builder):
    return HandFanStart(builder)
def HandFanAddLength(builder, length): builder.PrependInt32Slot(0, length, 0)
def AddLength(builder, length):
    return HandFanAddLength(builder, length)
def HandFanEnd(builder): return builder.EndObject()
def End(builder):
    return HandFanEnd(builder)

class HandFanT(object):

    # HandFanT
    def __init__(self):
        self.length = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        handFan = HandFan()
        handFan.Init(buf, pos)
        return cls.InitFromObj(handFan)

    @classmethod
    def InitFromObj(cls, handFan):
        x = HandFanT()
        x._UnPack(handFan)
        return x

    # HandFanT
    def _UnPack(self, handFan):
        if handFan is None:
            return
        self.length = handFan.Length()

    # HandFanT
    def Pack(self, builder):
        HandFanStart(builder)
        HandFanAddLength(builder, self.length)
        handFan = HandFanEnd(builder)
        return handFan
