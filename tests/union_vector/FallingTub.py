# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FallingTub(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # FallingTub
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FallingTub
    def Weight(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))

def CreateFallingTub(builder, weight):
    builder.Prep(4, 4)
    builder.PrependInt32(weight)
    return builder.Offset()


class FallingTubT(object):

    # FallingTubT
    def __init__(self):
        self.weight = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        fallingTub = FallingTub()
        fallingTub.Init(buf, pos)
        return cls.InitFromObj(fallingTub)

    @classmethod
    def InitFromObj(cls, fallingTub):
        x = FallingTubT()
        x._UnPack(fallingTub)
        return x

    # FallingTubT
    def _UnPack(self, fallingTub):
        if fallingTub is None:
            return
        self.weight = fallingTub.Weight()

    # FallingTubT
    def Pack(self, builder):
        return CreateFallingTub(builder, self.weight)
