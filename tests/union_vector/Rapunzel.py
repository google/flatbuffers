# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Rapunzel(object):
    __slots__ = ['_tab']

    @classmethod
    def SizeOf(cls):
        return 4

    # Rapunzel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Rapunzel
    def HairLength(self): return self._tab.Get(flatbuffers.number_types.Int32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))

def CreateRapunzel(builder, hairLength):
    builder.Prep(4, 4)
    builder.PrependInt32(hairLength)
    return builder.Offset()


class RapunzelT(object):

    # RapunzelT
    def __init__(self):
        self.hairLength = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rapunzel = Rapunzel()
        rapunzel.Init(buf, pos)
        return cls.InitFromObj(rapunzel)

    @classmethod
    def InitFromObj(cls, rapunzel):
        x = RapunzelT()
        x._UnPack(rapunzel)
        return x

    # RapunzelT
    def _UnPack(self, rapunzel):
        if rapunzel is None:
            return
        self.hairLength = rapunzel.HairLength()

    # RapunzelT
    def Pack(self, builder):
        return CreateRapunzel(builder, self.hairLength)
