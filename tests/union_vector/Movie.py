# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Movie(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Movie()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMovie(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def MovieBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x4D\x4F\x56\x49", size_prefixed=size_prefixed)

    # Movie
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Movie
    def MainCharacterType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Movie
    def MainCharacter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Movie
    def CharactersType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Movie
    def CharactersTypeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Movie
    def CharactersTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Movie
    def CharactersTypeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Movie
    def Characters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x -= self._tab.Pos
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, x)
            return obj
        return None

    # Movie
    def CharactersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Movie
    def CharactersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def MovieStart(builder): builder.StartObject(4)
def Start(builder):
    return MovieStart(builder)
def MovieAddMainCharacterType(builder, mainCharacterType): builder.PrependUint8Slot(0, mainCharacterType, 0)
def AddMainCharacterType(builder, mainCharacterType):
    return MovieAddMainCharacterType(builder, mainCharacterType)
def MovieAddMainCharacter(builder, mainCharacter): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(mainCharacter), 0)
def AddMainCharacter(builder, mainCharacter):
    return MovieAddMainCharacter(builder, mainCharacter)
def MovieAddCharactersType(builder, charactersType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(charactersType), 0)
def AddCharactersType(builder, charactersType):
    return MovieAddCharactersType(builder, charactersType)
def MovieStartCharactersTypeVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartCharactersTypeVector(builder, numElems):
    return MovieStartCharactersTypeVector(builder, numElems)
def MovieAddCharacters(builder, characters): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(characters), 0)
def AddCharacters(builder, characters):
    return MovieAddCharacters(builder, characters)
def MovieStartCharactersVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartCharactersVector(builder, numElems):
    return MovieStartCharactersVector(builder, numElems)
def MovieEnd(builder): return builder.EndObject()
def End(builder):
    return MovieEnd(builder)
import Attacker
import BookReader
import Character
import Rapunzel
try:
    from typing import List, Union
except:
    pass

class MovieT(object):

    # MovieT
    def __init__(self):
        self.mainCharacterType = 0  # type: int
        self.mainCharacter = None  # type: Union[None, Attacker.AttackerT, Rapunzel.RapunzelT, BookReader.BookReaderT, BookReader.BookReaderT, str, str]
        self.charactersType = None  # type: List[int]
        self.characters = None  # type: List[Union[None, Attacker.AttackerT, Rapunzel.RapunzelT, BookReader.BookReaderT, BookReader.BookReaderT, str, str]]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        movie = Movie()
        movie.Init(buf, pos)
        return cls.InitFromObj(movie)

    @classmethod
    def InitFromObj(cls, movie):
        x = MovieT()
        x._UnPack(movie)
        return x

    # MovieT
    def _UnPack(self, movie):
        if movie is None:
            return
        self.mainCharacterType = movie.MainCharacterType()
        self.mainCharacter = Character.CharacterCreator(self.mainCharacterType, movie.MainCharacter())
        if not movie.CharactersTypeIsNone():
            if np is None:
                self.charactersType = []
                for i in range(movie.CharactersTypeLength()):
                    self.charactersType.append(movie.CharactersType(i))
            else:
                self.charactersType = movie.CharactersTypeAsNumpy()
        if not movie.CharactersIsNone():
            self.characters = []
            for i in range(movie.CharactersLength()):
                self.characters.append(movie.Characters(i))

    # MovieT
    def Pack(self, builder):
        if self.mainCharacter is not None:
            mainCharacter = self.mainCharacter.Pack(builder)
        if self.charactersType is not None:
            if np is not None and type(self.charactersType) is np.ndarray:
                charactersType = builder.CreateNumpyVector(self.charactersType)
            else:
                MovieStartCharactersTypeVector(builder, len(self.charactersType))
                for i in reversed(range(len(self.charactersType))):
                    builder.PrependVOffsetT(self.charactersType[i])
                charactersType = builder.EndVector()
        if self.characters is not None:
            if np is not None and type(self.characters) is np.ndarray:
                characters = builder.CreateNumpyVector(self.characters)
            else:
                MovieStartCharactersVector(builder, len(self.characters))
                for i in reversed(range(len(self.characters))):
                    builder.PrependVOffsetT(self.characters[i])
                characters = builder.EndVector()
        MovieStart(builder)
        MovieAddMainCharacterType(builder, self.mainCharacterType)
        if self.mainCharacter is not None:
            MovieAddMainCharacter(builder, mainCharacter)
        if self.charactersType is not None:
            MovieAddCharactersType(builder, charactersType)
        if self.characters is not None:
            MovieAddCharacters(builder, characters)
        movie = MovieEnd(builder)
        return movie
