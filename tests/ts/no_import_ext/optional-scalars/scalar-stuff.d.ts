import * as flatbuffers from 'flatbuffers';
import { OptionalByte } from '../optional-scalars/optional-byte';
export declare class ScalarStuff {
    bb: flatbuffers.ByteBuffer | null;
    bb_pos: number;
    __init(i: number, bb: flatbuffers.ByteBuffer): ScalarStuff;
    static getRootAsScalarStuff(bb: flatbuffers.ByteBuffer, obj?: ScalarStuff): ScalarStuff;
    static getSizePrefixedRootAsScalarStuff(bb: flatbuffers.ByteBuffer, obj?: ScalarStuff): ScalarStuff;
    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean;
    justI8(): number;
    maybeI8(): number | null;
    defaultI8(): number;
    justU8(): number;
    maybeU8(): number | null;
    defaultU8(): number;
    justI16(): number;
    maybeI16(): number | null;
    defaultI16(): number;
    justU16(): number;
    maybeU16(): number | null;
    defaultU16(): number;
    justI32(): number;
    maybeI32(): number | null;
    defaultI32(): number;
    justU32(): number;
    maybeU32(): number | null;
    defaultU32(): number;
    justI64(): bigint;
    maybeI64(): bigint | null;
    defaultI64(): bigint;
    justU64(): bigint;
    maybeU64(): bigint | null;
    defaultU64(): bigint;
    justF32(): number;
    maybeF32(): number | null;
    defaultF32(): number;
    justF64(): number;
    maybeF64(): number | null;
    defaultF64(): number;
    justBool(): boolean;
    maybeBool(): boolean | null;
    defaultBool(): boolean;
    justEnum(): OptionalByte;
    maybeEnum(): OptionalByte | null;
    defaultEnum(): OptionalByte;
    static getFullyQualifiedName(): string;
    static startScalarStuff(builder: flatbuffers.Builder): void;
    static addJustI8(builder: flatbuffers.Builder, justI8: number): void;
    static addMaybeI8(builder: flatbuffers.Builder, maybeI8: number): void;
    static addDefaultI8(builder: flatbuffers.Builder, defaultI8: number): void;
    static addJustU8(builder: flatbuffers.Builder, justU8: number): void;
    static addMaybeU8(builder: flatbuffers.Builder, maybeU8: number): void;
    static addDefaultU8(builder: flatbuffers.Builder, defaultU8: number): void;
    static addJustI16(builder: flatbuffers.Builder, justI16: number): void;
    static addMaybeI16(builder: flatbuffers.Builder, maybeI16: number): void;
    static addDefaultI16(builder: flatbuffers.Builder, defaultI16: number): void;
    static addJustU16(builder: flatbuffers.Builder, justU16: number): void;
    static addMaybeU16(builder: flatbuffers.Builder, maybeU16: number): void;
    static addDefaultU16(builder: flatbuffers.Builder, defaultU16: number): void;
    static addJustI32(builder: flatbuffers.Builder, justI32: number): void;
    static addMaybeI32(builder: flatbuffers.Builder, maybeI32: number): void;
    static addDefaultI32(builder: flatbuffers.Builder, defaultI32: number): void;
    static addJustU32(builder: flatbuffers.Builder, justU32: number): void;
    static addMaybeU32(builder: flatbuffers.Builder, maybeU32: number): void;
    static addDefaultU32(builder: flatbuffers.Builder, defaultU32: number): void;
    static addJustI64(builder: flatbuffers.Builder, justI64: bigint): void;
    static addMaybeI64(builder: flatbuffers.Builder, maybeI64: bigint): void;
    static addDefaultI64(builder: flatbuffers.Builder, defaultI64: bigint): void;
    static addJustU64(builder: flatbuffers.Builder, justU64: bigint): void;
    static addMaybeU64(builder: flatbuffers.Builder, maybeU64: bigint): void;
    static addDefaultU64(builder: flatbuffers.Builder, defaultU64: bigint): void;
    static addJustF32(builder: flatbuffers.Builder, justF32: number): void;
    static addMaybeF32(builder: flatbuffers.Builder, maybeF32: number): void;
    static addDefaultF32(builder: flatbuffers.Builder, defaultF32: number): void;
    static addJustF64(builder: flatbuffers.Builder, justF64: number): void;
    static addMaybeF64(builder: flatbuffers.Builder, maybeF64: number): void;
    static addDefaultF64(builder: flatbuffers.Builder, defaultF64: number): void;
    static addJustBool(builder: flatbuffers.Builder, justBool: boolean): void;
    static addMaybeBool(builder: flatbuffers.Builder, maybeBool: boolean): void;
    static addDefaultBool(builder: flatbuffers.Builder, defaultBool: boolean): void;
    static addJustEnum(builder: flatbuffers.Builder, justEnum: OptionalByte): void;
    static addMaybeEnum(builder: flatbuffers.Builder, maybeEnum: OptionalByte): void;
    static addDefaultEnum(builder: flatbuffers.Builder, defaultEnum: OptionalByte): void;
    static endScalarStuff(builder: flatbuffers.Builder): flatbuffers.Offset;
    static finishScalarStuffBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static finishSizePrefixedScalarStuffBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset): void;
    static createScalarStuff(builder: flatbuffers.Builder, justI8: number, maybeI8: number | null, defaultI8: number, justU8: number, maybeU8: number | null, defaultU8: number, justI16: number, maybeI16: number | null, defaultI16: number, justU16: number, maybeU16: number | null, defaultU16: number, justI32: number, maybeI32: number | null, defaultI32: number, justU32: number, maybeU32: number | null, defaultU32: number, justI64: bigint, maybeI64: bigint | null, defaultI64: bigint, justU64: bigint, maybeU64: bigint | null, defaultU64: bigint, justF32: number, maybeF32: number | null, defaultF32: number, justF64: number, maybeF64: number | null, defaultF64: number, justBool: boolean, maybeBool: boolean | null, defaultBool: boolean, justEnum: OptionalByte, maybeEnum: OptionalByte | null, defaultEnum: OptionalByte): flatbuffers.Offset;
}
