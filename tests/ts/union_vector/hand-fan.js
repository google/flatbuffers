// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class HandFan {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsHandFan(bb, obj) {
        return (obj || new HandFan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsHandFan(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new HandFan()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    length() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    }
    mutate_length(value) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        if (offset === 0) {
            return false;
        }
        this.bb.writeInt32(this.bb_pos + offset, value);
        return true;
    }
    static getFullyQualifiedName() {
        return 'HandFan';
    }
    static startHandFan(builder) {
        builder.startObject(1);
    }
    static addLength(builder, length) {
        builder.addFieldInt32(0, length, 0);
    }
    static endHandFan(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createHandFan(builder, length) {
        HandFan.startHandFan(builder);
        HandFan.addLength(builder, length);
        return HandFan.endHandFan(builder);
    }
    unpack() {
        return new HandFanT(this.length());
    }
    unpackTo(_o) {
        _o.length = this.length();
    }
}
export class HandFanT {
    constructor(length = 0) {
        this.length = length;
    }
    pack(builder) {
        return HandFan.createHandFan(builder, this.length);
    }
}
