// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod bar {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum BarOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Bar<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Bar<'a> {
  type Inner = Bar<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Bar<'a> {
  pub const VT_VALUE: flatbuffers::VOffsetT = 4;

  pub const fn get_fully_qualified_name() -> &'static str {
    "bar.Bar"
  }

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Bar { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BarArgs<'args>
  ) -> flatbuffers::WIPOffset<Bar<'bldr>> {
    let mut builder = BarBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> BarT {
    let value = self.value().map(|x| {
      Box::new(x.unpack())
    });
    BarT {
      value,
    }
  }

  #[inline]
  pub fn value(&self) -> Option<rust_module_test_a::Foo<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<rust_module_test_a::Foo>>(Bar::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for Bar<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<rust_module_test_a::Foo>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct BarArgs<'a> {
    pub value: Option<flatbuffers::WIPOffset<rust_module_test_a::Foo<'a>>>,
}
impl<'a> Default for BarArgs<'a> {
  #[inline]
  fn default() -> Self {
    BarArgs {
      value: None,
    }
  }
}

pub struct BarBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BarBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<rust_module_test_a::Foo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<rust_module_test_a::Foo>>(Bar::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BarBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BarBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Bar<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Bar<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Bar");
      ds.field("value", &self.value());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BarT {
  pub value: Option<Box<rust_module_test_a::FooT>>,
}
impl Default for BarT {
  fn default() -> Self {
    Self {
      value: None,
    }
  }
}
impl BarT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Bar<'b>> {
    let value = self.value.as_ref().map(|x|{
      x.pack(_fbb)
    });
    Bar::create(_fbb, &BarArgs{
      value,
    })
  }
}
}  // pub mod bar

