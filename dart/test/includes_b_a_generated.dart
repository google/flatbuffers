// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library a;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


export './includes_a_a_generated.dart';
import './includes_a_a_generated.dart';

class B {
  B._(this._bc, this._bcOffset);
  factory B(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<B> reader = _BReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  A? get myA => A.reader.vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'B{myA: ${myA}}';
  }

  BT unpack() => BT(
      myA: myA?.unpack());

  static int pack(fb.Builder fbBuilder, BT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class BT implements fb.Packable {
  AT? myA;

  BT({
      this.myA});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? myAOffset = myA?.pack(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, myAOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BT{myA: ${myA}}';
  }
}

class _BReader extends fb.TableReader<B> {
  const _BReader();

  @override
  B createObject(fb.BufferContext bc, int offset) => 
    B._(bc, offset);
}

class BBuilder {
  BBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addMyAOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BObjectBuilder extends fb.ObjectBuilder {
  final AObjectBuilder? _myA;

  BObjectBuilder({
    AObjectBuilder? myA,
  })
      : _myA = myA;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? myAOffset = _myA?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, myAOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
