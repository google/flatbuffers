// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library a;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;



class A {
  A._(this._bc, this._bcOffset);
  factory A(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<A> reader = _AReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get options => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);

  @override
  String toString() {
    return 'A{options: ${options}}';
  }

  AT unpack() => AT(
      options: options);

  static int pack(fb.Builder fbBuilder, AT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class AT implements fb.Packable {
  int options;

  AT({
      this.options = 0});

  @override
  int pack(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, options);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'AT{options: ${options}}';
  }
}

class _AReader extends fb.TableReader<A> {
  const _AReader();

  @override
  A createObject(fb.BufferContext bc, int offset) => 
    A._(bc, offset);
}

class ABuilder {
  ABuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addOptions(int? options) {
    fbBuilder.addUint8(0, options);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class AObjectBuilder extends fb.ObjectBuilder {
  final int? _options;

  AObjectBuilder({
    int? options,
  })
      : _options = options;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.startTable(1);
    fbBuilder.addUint8(0, _options);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
