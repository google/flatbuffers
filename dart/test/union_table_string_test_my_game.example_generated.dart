// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library my_game.example;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


enum TestUnionTypeId {
  NONE(0),
  test_table(1),
  test_string(2);

  final int value;
  const TestUnionTypeId(this.value);

  factory TestUnionTypeId.fromValue(int value) {
    switch (value) {
      case 0: return TestUnionTypeId.NONE;
      case 1: return TestUnionTypeId.test_table;
      case 2: return TestUnionTypeId.test_string;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static TestUnionTypeId? _createOrNull(int? value) =>
      value == null ? null : TestUnionTypeId.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 2;
  static const fb.Reader<TestUnionTypeId> reader = _TestUnionTypeIdReader();
}

class _TestUnionTypeIdReader extends fb.Reader<TestUnionTypeId> {
  const _TestUnionTypeIdReader();

  @override
  int get size => 1;

  @override
  TestUnionTypeId read(fb.BufferContext bc, int offset) =>
      TestUnionTypeId.fromValue(const fb.Uint8Reader().read(bc, offset));
}

class TestTable {
  TestTable._(this._bc, this._bcOffset);
  factory TestTable(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TestTable> reader = _TestTableReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get value => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'TestTable{value: ${value}}';
  }

  TestTableT unpack() => TestTableT(
      value: value);

  static int pack(fb.Builder fbBuilder, TestTableT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class TestTableT implements fb.Packable {
  String? value;

  TestTableT({
      this.value});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? valueOffset = value == null ? null
        : fbBuilder.writeString(value!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valueOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'TestTableT{value: ${value}}';
  }
}

class _TestTableReader extends fb.TableReader<TestTable> {
  const _TestTableReader();

  @override
  TestTable createObject(fb.BufferContext bc, int offset) =>
    TestTable._(bc, offset);
}

class TestTableBuilder {
  TestTableBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addValueOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TestTableObjectBuilder extends fb.ObjectBuilder {
  final String? value;

  TestTableObjectBuilder({
    this.value,
  });

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? valueOffset = value == null ? null
        : fbBuilder.writeString(value!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, valueOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class RootTable {
  RootTable._(this._bc, this._bcOffset);
  factory RootTable(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<RootTable> reader = _RootTableReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  TestUnionTypeId? get testUnionType => TestUnionTypeId._createOrNull(const fb.Uint8Reader().vTableGetNullable(_bc, _bcOffset, 4));
  Object? get testUnion {
    switch (testUnionType?.value) {
      case 1: return TestTable.reader.vTableGetNullable(_bc, _bcOffset, 6);
      case 2: return const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
      default: return null;
    }
  }

  @override
  String toString() {
    return 'RootTable{testUnionType: ${testUnionType}, testUnion: ${testUnion}}';
  }

  RootTableT unpack() => RootTableT(
      testUnionType: testUnionType,
      testUnion: testUnion);

  static int pack(fb.Builder fbBuilder, RootTableT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

class RootTableT implements fb.Packable {
  TestUnionTypeId? testUnionType;
  Object? testUnion;

  RootTableT({
      this.testUnionType,
      this.testUnion});

  @override
  int pack(fb.Builder fbBuilder) {
    int? testUnionOffset;
    switch (testUnionType) {
      case TestUnionTypeId.NONE:
      case null:
        testUnionOffset = 0;
        break;
      case TestUnionTypeId.test_table:
        testUnionOffset = (testUnion as TestTableObjectBuilder?)?.finish(fbBuilder);
        break;
      case TestUnionTypeId.test_string:
        testUnionOffset = fbBuilder.writeString(testUnion as String);
        break;
    }
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, testUnionType?.value ?? 0);
    fbBuilder.addOffset(1, testUnionOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'RootTableT{testUnionType: ${testUnionType}, testUnion: ${testUnion}}';
  }
}

class _RootTableReader extends fb.TableReader<RootTable> {
  const _RootTableReader();

  @override
  RootTable createObject(fb.BufferContext bc, int offset) =>
    RootTable._(bc, offset);
}

class RootTableBuilder {
  RootTableBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addTestUnionType(TestUnionTypeId? testUnionType) {
    fbBuilder.addUint8(0, testUnionType?.value);
    return fbBuilder.offset;
  }
  int addTestUnionOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class RootTableObjectBuilder extends fb.ObjectBuilder {
  final TestUnionTypeId? testUnionType;
  final Object? testUnion;

  RootTableObjectBuilder({
    this.testUnionType,
    this.testUnion,
  }) : assert((testUnion == null) == (testUnionType == null || testUnionType == TestUnionTypeId.NONE), 'Union testUnion requires matching type and value');

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    int? testUnionOffset;
    switch (testUnionType) {
      case TestUnionTypeId.NONE:
      case null:
        testUnionOffset = 0;
        break;
      case TestUnionTypeId.test_table:
        testUnionOffset = (testUnion as TestTableObjectBuilder?)?.finish(fbBuilder);
        break;
      case TestUnionTypeId.test_string:
        testUnionOffset = fbBuilder.writeString(testUnion as String);
        break;
    }
    fbBuilder.startTable(2);
    fbBuilder.addUint8(0, testUnionType?.value ?? 0);
    fbBuilder.addOffset(1, testUnionOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
